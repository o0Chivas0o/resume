{"version":3,"file":null,"sources":["/home/travis/build/leancloud/js-realtime-sdk/proto/message-compiled.js","/home/travis/build/leancloud/js-realtime-sdk/proto/message.js","/home/travis/build/leancloud/js-realtime-sdk/src/utils/global.js","/home/travis/build/leancloud/js-realtime-sdk/src/utils/expirable.js","/home/travis/build/leancloud/js-realtime-sdk/src/utils/cache.js","/home/travis/build/leancloud/js-realtime-sdk/src/utils/index.js","/home/travis/build/leancloud/js-realtime-sdk/src/websocket-plus.js","/home/travis/build/leancloud/js-realtime-sdk/src/error.js","/home/travis/build/leancloud/js-realtime-sdk/src/connection.js","/home/travis/build/leancloud/js-realtime-sdk/src/plugin.js","/home/travis/build/leancloud/js-realtime-sdk/src/realtime.js","/home/travis/build/leancloud/js-realtime-sdk/src/messages/message.js","/home/travis/build/leancloud/js-realtime-sdk/src/messages/helpers.js","/home/travis/build/leancloud/js-realtime-sdk/src/messages/typed-message.js","/home/travis/build/leancloud/js-realtime-sdk/src/messages/recalled-message.js","/home/travis/build/leancloud/js-realtime-sdk/src/conversations/conversation-base.js","/home/travis/build/leancloud/js-realtime-sdk/src/conversation-member-info.js","/home/travis/build/leancloud/js-realtime-sdk/src/signature-factory-runner.js","/home/travis/build/leancloud/js-realtime-sdk/src/conversations/persistent-conversation.js","/home/travis/build/leancloud/js-realtime-sdk/src/conversations/conversation.js","/home/travis/build/leancloud/js-realtime-sdk/src/conversations/chat-room.js","/home/travis/build/leancloud/js-realtime-sdk/src/conversations/service-conversation.js","/home/travis/build/leancloud/js-realtime-sdk/src/conversations/temporary-conversation.js","/home/travis/build/leancloud/js-realtime-sdk/src/conversation-query.js","/home/travis/build/leancloud/js-realtime-sdk/src/session-manager.js","/home/travis/build/leancloud/js-realtime-sdk/src/im-client.js","/home/travis/build/leancloud/js-realtime-sdk/src/messages/binary-message.js","/home/travis/build/leancloud/js-realtime-sdk/src/messages/text-message.js","/home/travis/build/leancloud/js-realtime-sdk/src/message-parser.js","/home/travis/build/leancloud/js-realtime-sdk/src/plugin-im.js","/home/travis/build/leancloud/js-realtime-sdk/src/index.js"],"sourcesContent":["module.exports = require(\"protobufjs/dist/protobuf-light\").newBuilder({})['import']({\n    \"package\": \"push_server.messages2\",\n    \"syntax\": \"proto2\",\n    \"options\": {\n        \"objc_class_prefix\": \"AVIM\"\n    },\n    \"messages\": [\n        {\n            \"name\": \"JsonObjectMessage\",\n            \"syntax\": \"proto2\",\n            \"fields\": [\n                {\n                    \"rule\": \"required\",\n                    \"type\": \"string\",\n                    \"name\": \"data\",\n                    \"id\": 1\n                }\n            ]\n        },\n        {\n            \"name\": \"UnreadTuple\",\n            \"syntax\": \"proto2\",\n            \"fields\": [\n                {\n                    \"rule\": \"required\",\n                    \"type\": \"string\",\n                    \"name\": \"cid\",\n                    \"id\": 1\n                },\n                {\n                    \"rule\": \"required\",\n                    \"type\": \"int32\",\n                    \"name\": \"unread\",\n                    \"id\": 2\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"string\",\n                    \"name\": \"mid\",\n                    \"id\": 3\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"int64\",\n                    \"name\": \"timestamp\",\n                    \"id\": 4\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"string\",\n                    \"name\": \"from\",\n                    \"id\": 5\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"string\",\n                    \"name\": \"data\",\n                    \"id\": 6\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"int64\",\n                    \"name\": \"patchTimestamp\",\n                    \"id\": 7\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"bool\",\n                    \"name\": \"mentioned\",\n                    \"id\": 8\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"bytes\",\n                    \"name\": \"binaryMsg\",\n                    \"id\": 9\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"int32\",\n                    \"name\": \"convType\",\n                    \"id\": 10\n                }\n            ]\n        },\n        {\n            \"name\": \"LogItem\",\n            \"syntax\": \"proto2\",\n            \"fields\": [\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"string\",\n                    \"name\": \"from\",\n                    \"id\": 1\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"string\",\n                    \"name\": \"data\",\n                    \"id\": 2\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"int64\",\n                    \"name\": \"timestamp\",\n                    \"id\": 3\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"string\",\n                    \"name\": \"msgId\",\n                    \"id\": 4\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"int64\",\n                    \"name\": \"ackAt\",\n                    \"id\": 5\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"int64\",\n                    \"name\": \"readAt\",\n                    \"id\": 6\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"int64\",\n                    \"name\": \"patchTimestamp\",\n                    \"id\": 7\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"bool\",\n                    \"name\": \"mentionAll\",\n                    \"id\": 8\n                },\n                {\n                    \"rule\": \"repeated\",\n                    \"type\": \"string\",\n                    \"name\": \"mentionPids\",\n                    \"id\": 9\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"bool\",\n                    \"name\": \"bin\",\n                    \"id\": 10\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"int32\",\n                    \"name\": \"convType\",\n                    \"id\": 11\n                }\n            ]\n        },\n        {\n            \"name\": \"ConvMemberInfo\",\n            \"syntax\": \"proto2\",\n            \"fields\": [\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"string\",\n                    \"name\": \"pid\",\n                    \"id\": 1\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"string\",\n                    \"name\": \"role\",\n                    \"id\": 2\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"string\",\n                    \"name\": \"infoId\",\n                    \"id\": 3\n                }\n            ]\n        },\n        {\n            \"name\": \"DataCommand\",\n            \"syntax\": \"proto2\",\n            \"fields\": [\n                {\n                    \"rule\": \"repeated\",\n                    \"type\": \"string\",\n                    \"name\": \"ids\",\n                    \"id\": 1\n                },\n                {\n                    \"rule\": \"repeated\",\n                    \"type\": \"JsonObjectMessage\",\n                    \"name\": \"msg\",\n                    \"id\": 2\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"bool\",\n                    \"name\": \"offline\",\n                    \"id\": 3\n                }\n            ]\n        },\n        {\n            \"name\": \"SessionCommand\",\n            \"syntax\": \"proto2\",\n            \"fields\": [\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"int64\",\n                    \"name\": \"t\",\n                    \"id\": 1\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"string\",\n                    \"name\": \"n\",\n                    \"id\": 2\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"string\",\n                    \"name\": \"s\",\n                    \"id\": 3\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"string\",\n                    \"name\": \"ua\",\n                    \"id\": 4\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"bool\",\n                    \"name\": \"r\",\n                    \"id\": 5\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"string\",\n                    \"name\": \"tag\",\n                    \"id\": 6\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"string\",\n                    \"name\": \"deviceId\",\n                    \"id\": 7\n                },\n                {\n                    \"rule\": \"repeated\",\n                    \"type\": \"string\",\n                    \"name\": \"sessionPeerIds\",\n                    \"id\": 8\n                },\n                {\n                    \"rule\": \"repeated\",\n                    \"type\": \"string\",\n                    \"name\": \"onlineSessionPeerIds\",\n                    \"id\": 9\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"string\",\n                    \"name\": \"st\",\n                    \"id\": 10\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"int32\",\n                    \"name\": \"stTtl\",\n                    \"id\": 11\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"int32\",\n                    \"name\": \"code\",\n                    \"id\": 12\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"string\",\n                    \"name\": \"reason\",\n                    \"id\": 13\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"string\",\n                    \"name\": \"deviceToken\",\n                    \"id\": 14\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"bool\",\n                    \"name\": \"sp\",\n                    \"id\": 15\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"string\",\n                    \"name\": \"detail\",\n                    \"id\": 16\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"int64\",\n                    \"name\": \"lastUnreadNotifTime\",\n                    \"id\": 17\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"int64\",\n                    \"name\": \"lastPatchTime\",\n                    \"id\": 18\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"int64\",\n                    \"name\": \"configBitmap\",\n                    \"id\": 19\n                }\n            ]\n        },\n        {\n            \"name\": \"ErrorCommand\",\n            \"syntax\": \"proto2\",\n            \"fields\": [\n                {\n                    \"rule\": \"required\",\n                    \"type\": \"int32\",\n                    \"name\": \"code\",\n                    \"id\": 1\n                },\n                {\n                    \"rule\": \"required\",\n                    \"type\": \"string\",\n                    \"name\": \"reason\",\n                    \"id\": 2\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"int32\",\n                    \"name\": \"appCode\",\n                    \"id\": 3\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"string\",\n                    \"name\": \"detail\",\n                    \"id\": 4\n                },\n                {\n                    \"rule\": \"repeated\",\n                    \"type\": \"string\",\n                    \"name\": \"pids\",\n                    \"id\": 5\n                }\n            ]\n        },\n        {\n            \"name\": \"DirectCommand\",\n            \"syntax\": \"proto2\",\n            \"fields\": [\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"string\",\n                    \"name\": \"msg\",\n                    \"id\": 1\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"string\",\n                    \"name\": \"uid\",\n                    \"id\": 2\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"string\",\n                    \"name\": \"fromPeerId\",\n                    \"id\": 3\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"int64\",\n                    \"name\": \"timestamp\",\n                    \"id\": 4\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"bool\",\n                    \"name\": \"offline\",\n                    \"id\": 5\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"bool\",\n                    \"name\": \"hasMore\",\n                    \"id\": 6\n                },\n                {\n                    \"rule\": \"repeated\",\n                    \"type\": \"string\",\n                    \"name\": \"toPeerIds\",\n                    \"id\": 7\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"bool\",\n                    \"name\": \"r\",\n                    \"id\": 10\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"string\",\n                    \"name\": \"cid\",\n                    \"id\": 11\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"string\",\n                    \"name\": \"id\",\n                    \"id\": 12\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"bool\",\n                    \"name\": \"transient\",\n                    \"id\": 13\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"string\",\n                    \"name\": \"dt\",\n                    \"id\": 14\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"string\",\n                    \"name\": \"roomId\",\n                    \"id\": 15\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"string\",\n                    \"name\": \"pushData\",\n                    \"id\": 16\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"bool\",\n                    \"name\": \"will\",\n                    \"id\": 17\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"int64\",\n                    \"name\": \"patchTimestamp\",\n                    \"id\": 18\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"bytes\",\n                    \"name\": \"binaryMsg\",\n                    \"id\": 19\n                },\n                {\n                    \"rule\": \"repeated\",\n                    \"type\": \"string\",\n                    \"name\": \"mentionPids\",\n                    \"id\": 20\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"bool\",\n                    \"name\": \"mentionAll\",\n                    \"id\": 21\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"int32\",\n                    \"name\": \"convType\",\n                    \"id\": 22\n                }\n            ]\n        },\n        {\n            \"name\": \"AckCommand\",\n            \"syntax\": \"proto2\",\n            \"fields\": [\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"int32\",\n                    \"name\": \"code\",\n                    \"id\": 1\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"string\",\n                    \"name\": \"reason\",\n                    \"id\": 2\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"string\",\n                    \"name\": \"mid\",\n                    \"id\": 3\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"string\",\n                    \"name\": \"cid\",\n                    \"id\": 4\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"int64\",\n                    \"name\": \"t\",\n                    \"id\": 5\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"string\",\n                    \"name\": \"uid\",\n                    \"id\": 6\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"int64\",\n                    \"name\": \"fromts\",\n                    \"id\": 7\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"int64\",\n                    \"name\": \"tots\",\n                    \"id\": 8\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"string\",\n                    \"name\": \"type\",\n                    \"id\": 9\n                },\n                {\n                    \"rule\": \"repeated\",\n                    \"type\": \"string\",\n                    \"name\": \"ids\",\n                    \"id\": 10\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"int32\",\n                    \"name\": \"appCode\",\n                    \"id\": 11\n                }\n            ]\n        },\n        {\n            \"name\": \"UnreadCommand\",\n            \"syntax\": \"proto2\",\n            \"fields\": [\n                {\n                    \"rule\": \"repeated\",\n                    \"type\": \"UnreadTuple\",\n                    \"name\": \"convs\",\n                    \"id\": 1\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"int64\",\n                    \"name\": \"notifTime\",\n                    \"id\": 2\n                }\n            ]\n        },\n        {\n            \"name\": \"ConvCommand\",\n            \"syntax\": \"proto2\",\n            \"fields\": [\n                {\n                    \"rule\": \"repeated\",\n                    \"type\": \"string\",\n                    \"name\": \"m\",\n                    \"id\": 1\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"bool\",\n                    \"name\": \"transient\",\n                    \"id\": 2\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"bool\",\n                    \"name\": \"unique\",\n                    \"id\": 3\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"string\",\n                    \"name\": \"cid\",\n                    \"id\": 4\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"string\",\n                    \"name\": \"cdate\",\n                    \"id\": 5\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"string\",\n                    \"name\": \"initBy\",\n                    \"id\": 6\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"string\",\n                    \"name\": \"sort\",\n                    \"id\": 7\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"int32\",\n                    \"name\": \"limit\",\n                    \"id\": 8\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"int32\",\n                    \"name\": \"skip\",\n                    \"id\": 9\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"int32\",\n                    \"name\": \"flag\",\n                    \"id\": 10\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"int32\",\n                    \"name\": \"count\",\n                    \"id\": 11\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"string\",\n                    \"name\": \"udate\",\n                    \"id\": 12\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"int64\",\n                    \"name\": \"t\",\n                    \"id\": 13\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"string\",\n                    \"name\": \"n\",\n                    \"id\": 14\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"string\",\n                    \"name\": \"s\",\n                    \"id\": 15\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"bool\",\n                    \"name\": \"statusSub\",\n                    \"id\": 16\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"bool\",\n                    \"name\": \"statusPub\",\n                    \"id\": 17\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"int32\",\n                    \"name\": \"statusTTL\",\n                    \"id\": 18\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"string\",\n                    \"name\": \"uniqueId\",\n                    \"id\": 19\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"string\",\n                    \"name\": \"targetClientId\",\n                    \"id\": 20\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"int64\",\n                    \"name\": \"maxReadTimestamp\",\n                    \"id\": 21\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"int64\",\n                    \"name\": \"maxAckTimestamp\",\n                    \"id\": 22\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"bool\",\n                    \"name\": \"queryAllMembers\",\n                    \"id\": 23\n                },\n                {\n                    \"rule\": \"repeated\",\n                    \"type\": \"MaxReadTuple\",\n                    \"name\": \"maxReadTuples\",\n                    \"id\": 24\n                },\n                {\n                    \"rule\": \"repeated\",\n                    \"type\": \"string\",\n                    \"name\": \"cids\",\n                    \"id\": 25\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"ConvMemberInfo\",\n                    \"name\": \"info\",\n                    \"id\": 26\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"bool\",\n                    \"name\": \"tempConv\",\n                    \"id\": 27\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"int32\",\n                    \"name\": \"tempConvTTL\",\n                    \"id\": 28\n                },\n                {\n                    \"rule\": \"repeated\",\n                    \"type\": \"string\",\n                    \"name\": \"tempConvIds\",\n                    \"id\": 29\n                },\n                {\n                    \"rule\": \"repeated\",\n                    \"type\": \"string\",\n                    \"name\": \"allowedPids\",\n                    \"id\": 30\n                },\n                {\n                    \"rule\": \"repeated\",\n                    \"type\": \"ErrorCommand\",\n                    \"name\": \"failedPids\",\n                    \"id\": 31\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"string\",\n                    \"name\": \"next\",\n                    \"id\": 40\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"JsonObjectMessage\",\n                    \"name\": \"results\",\n                    \"id\": 100\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"JsonObjectMessage\",\n                    \"name\": \"where\",\n                    \"id\": 101\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"JsonObjectMessage\",\n                    \"name\": \"attr\",\n                    \"id\": 103\n                }\n            ]\n        },\n        {\n            \"name\": \"RoomCommand\",\n            \"syntax\": \"proto2\",\n            \"fields\": [\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"string\",\n                    \"name\": \"roomId\",\n                    \"id\": 1\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"string\",\n                    \"name\": \"s\",\n                    \"id\": 2\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"int64\",\n                    \"name\": \"t\",\n                    \"id\": 3\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"string\",\n                    \"name\": \"n\",\n                    \"id\": 4\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"bool\",\n                    \"name\": \"transient\",\n                    \"id\": 5\n                },\n                {\n                    \"rule\": \"repeated\",\n                    \"type\": \"string\",\n                    \"name\": \"roomPeerIds\",\n                    \"id\": 6\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"string\",\n                    \"name\": \"byPeerId\",\n                    \"id\": 7\n                }\n            ]\n        },\n        {\n            \"name\": \"LogsCommand\",\n            \"syntax\": \"proto2\",\n            \"fields\": [\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"string\",\n                    \"name\": \"cid\",\n                    \"id\": 1\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"int32\",\n                    \"name\": \"l\",\n                    \"id\": 2\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"int32\",\n                    \"name\": \"limit\",\n                    \"id\": 3\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"int64\",\n                    \"name\": \"t\",\n                    \"id\": 4\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"int64\",\n                    \"name\": \"tt\",\n                    \"id\": 5\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"string\",\n                    \"name\": \"tmid\",\n                    \"id\": 6\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"string\",\n                    \"name\": \"mid\",\n                    \"id\": 7\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"string\",\n                    \"name\": \"checksum\",\n                    \"id\": 8\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"bool\",\n                    \"name\": \"stored\",\n                    \"id\": 9\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"QueryDirection\",\n                    \"name\": \"direction\",\n                    \"id\": 10,\n                    \"options\": {\n                        \"default\": \"OLD\"\n                    }\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"bool\",\n                    \"name\": \"tIncluded\",\n                    \"id\": 11\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"bool\",\n                    \"name\": \"ttIncluded\",\n                    \"id\": 12\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"int32\",\n                    \"name\": \"lctype\",\n                    \"id\": 13\n                },\n                {\n                    \"rule\": \"repeated\",\n                    \"type\": \"LogItem\",\n                    \"name\": \"logs\",\n                    \"id\": 105\n                }\n            ],\n            \"enums\": [\n                {\n                    \"name\": \"QueryDirection\",\n                    \"syntax\": \"proto2\",\n                    \"values\": [\n                        {\n                            \"name\": \"OLD\",\n                            \"id\": 1\n                        },\n                        {\n                            \"name\": \"NEW\",\n                            \"id\": 2\n                        }\n                    ]\n                }\n            ]\n        },\n        {\n            \"name\": \"RcpCommand\",\n            \"syntax\": \"proto2\",\n            \"fields\": [\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"string\",\n                    \"name\": \"id\",\n                    \"id\": 1\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"string\",\n                    \"name\": \"cid\",\n                    \"id\": 2\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"int64\",\n                    \"name\": \"t\",\n                    \"id\": 3\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"bool\",\n                    \"name\": \"read\",\n                    \"id\": 4\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"string\",\n                    \"name\": \"from\",\n                    \"id\": 5\n                }\n            ]\n        },\n        {\n            \"name\": \"ReadTuple\",\n            \"syntax\": \"proto2\",\n            \"fields\": [\n                {\n                    \"rule\": \"required\",\n                    \"type\": \"string\",\n                    \"name\": \"cid\",\n                    \"id\": 1\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"int64\",\n                    \"name\": \"timestamp\",\n                    \"id\": 2\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"string\",\n                    \"name\": \"mid\",\n                    \"id\": 3\n                }\n            ]\n        },\n        {\n            \"name\": \"MaxReadTuple\",\n            \"syntax\": \"proto2\",\n            \"fields\": [\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"string\",\n                    \"name\": \"pid\",\n                    \"id\": 1\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"int64\",\n                    \"name\": \"maxAckTimestamp\",\n                    \"id\": 2\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"int64\",\n                    \"name\": \"maxReadTimestamp\",\n                    \"id\": 3\n                }\n            ]\n        },\n        {\n            \"name\": \"ReadCommand\",\n            \"syntax\": \"proto2\",\n            \"fields\": [\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"string\",\n                    \"name\": \"cid\",\n                    \"id\": 1\n                },\n                {\n                    \"rule\": \"repeated\",\n                    \"type\": \"string\",\n                    \"name\": \"cids\",\n                    \"id\": 2\n                },\n                {\n                    \"rule\": \"repeated\",\n                    \"type\": \"ReadTuple\",\n                    \"name\": \"convs\",\n                    \"id\": 3\n                }\n            ]\n        },\n        {\n            \"name\": \"PresenceCommand\",\n            \"syntax\": \"proto2\",\n            \"fields\": [\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"StatusType\",\n                    \"name\": \"status\",\n                    \"id\": 1\n                },\n                {\n                    \"rule\": \"repeated\",\n                    \"type\": \"string\",\n                    \"name\": \"sessionPeerIds\",\n                    \"id\": 2\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"string\",\n                    \"name\": \"cid\",\n                    \"id\": 3\n                }\n            ]\n        },\n        {\n            \"name\": \"ReportCommand\",\n            \"syntax\": \"proto2\",\n            \"fields\": [\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"bool\",\n                    \"name\": \"initiative\",\n                    \"id\": 1\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"string\",\n                    \"name\": \"type\",\n                    \"id\": 2\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"string\",\n                    \"name\": \"data\",\n                    \"id\": 3\n                }\n            ]\n        },\n        {\n            \"name\": \"PatchItem\",\n            \"syntax\": \"proto2\",\n            \"fields\": [\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"string\",\n                    \"name\": \"cid\",\n                    \"id\": 1\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"string\",\n                    \"name\": \"mid\",\n                    \"id\": 2\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"int64\",\n                    \"name\": \"timestamp\",\n                    \"id\": 3\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"bool\",\n                    \"name\": \"recall\",\n                    \"id\": 4\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"string\",\n                    \"name\": \"data\",\n                    \"id\": 5\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"int64\",\n                    \"name\": \"patchTimestamp\",\n                    \"id\": 6\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"string\",\n                    \"name\": \"from\",\n                    \"id\": 7\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"bytes\",\n                    \"name\": \"binaryMsg\",\n                    \"id\": 8\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"bool\",\n                    \"name\": \"mentionAll\",\n                    \"id\": 9\n                },\n                {\n                    \"rule\": \"repeated\",\n                    \"type\": \"string\",\n                    \"name\": \"mentionPids\",\n                    \"id\": 10\n                }\n            ]\n        },\n        {\n            \"name\": \"PatchCommand\",\n            \"syntax\": \"proto2\",\n            \"fields\": [\n                {\n                    \"rule\": \"repeated\",\n                    \"type\": \"PatchItem\",\n                    \"name\": \"patches\",\n                    \"id\": 1\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"int64\",\n                    \"name\": \"lastPatchTime\",\n                    \"id\": 2\n                }\n            ]\n        },\n        {\n            \"name\": \"PubsubCommand\",\n            \"syntax\": \"proto2\",\n            \"fields\": [\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"string\",\n                    \"name\": \"cid\",\n                    \"id\": 1\n                },\n                {\n                    \"rule\": \"repeated\",\n                    \"type\": \"string\",\n                    \"name\": \"cids\",\n                    \"id\": 2\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"string\",\n                    \"name\": \"topic\",\n                    \"id\": 3\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"string\",\n                    \"name\": \"subtopic\",\n                    \"id\": 4\n                },\n                {\n                    \"rule\": \"repeated\",\n                    \"type\": \"string\",\n                    \"name\": \"topics\",\n                    \"id\": 5\n                },\n                {\n                    \"rule\": \"repeated\",\n                    \"type\": \"string\",\n                    \"name\": \"subtopics\",\n                    \"id\": 6\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"JsonObjectMessage\",\n                    \"name\": \"results\",\n                    \"id\": 7\n                }\n            ]\n        },\n        {\n            \"name\": \"BlacklistCommand\",\n            \"syntax\": \"proto2\",\n            \"fields\": [\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"string\",\n                    \"name\": \"srcCid\",\n                    \"id\": 1\n                },\n                {\n                    \"rule\": \"repeated\",\n                    \"type\": \"string\",\n                    \"name\": \"toPids\",\n                    \"id\": 2\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"string\",\n                    \"name\": \"srcPid\",\n                    \"id\": 3\n                },\n                {\n                    \"rule\": \"repeated\",\n                    \"type\": \"string\",\n                    \"name\": \"toCids\",\n                    \"id\": 4\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"int32\",\n                    \"name\": \"limit\",\n                    \"id\": 5\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"string\",\n                    \"name\": \"next\",\n                    \"id\": 6\n                },\n                {\n                    \"rule\": \"repeated\",\n                    \"type\": \"string\",\n                    \"name\": \"blockedPids\",\n                    \"id\": 8\n                },\n                {\n                    \"rule\": \"repeated\",\n                    \"type\": \"string\",\n                    \"name\": \"blockedCids\",\n                    \"id\": 9\n                },\n                {\n                    \"rule\": \"repeated\",\n                    \"type\": \"string\",\n                    \"name\": \"allowedPids\",\n                    \"id\": 10\n                },\n                {\n                    \"rule\": \"repeated\",\n                    \"type\": \"ErrorCommand\",\n                    \"name\": \"failedPids\",\n                    \"id\": 11\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"int64\",\n                    \"name\": \"t\",\n                    \"id\": 12\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"string\",\n                    \"name\": \"n\",\n                    \"id\": 13\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"string\",\n                    \"name\": \"s\",\n                    \"id\": 14\n                }\n            ]\n        },\n        {\n            \"name\": \"GenericCommand\",\n            \"syntax\": \"proto2\",\n            \"fields\": [\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"CommandType\",\n                    \"name\": \"cmd\",\n                    \"id\": 1\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"OpType\",\n                    \"name\": \"op\",\n                    \"id\": 2\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"string\",\n                    \"name\": \"appId\",\n                    \"id\": 3\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"string\",\n                    \"name\": \"peerId\",\n                    \"id\": 4\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"int32\",\n                    \"name\": \"i\",\n                    \"id\": 5\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"string\",\n                    \"name\": \"installationId\",\n                    \"id\": 6\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"int32\",\n                    \"name\": \"priority\",\n                    \"id\": 7\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"int32\",\n                    \"name\": \"service\",\n                    \"id\": 8\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"int64\",\n                    \"name\": \"serverTs\",\n                    \"id\": 9\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"DataCommand\",\n                    \"name\": \"dataMessage\",\n                    \"id\": 101\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"SessionCommand\",\n                    \"name\": \"sessionMessage\",\n                    \"id\": 102\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"ErrorCommand\",\n                    \"name\": \"errorMessage\",\n                    \"id\": 103\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"DirectCommand\",\n                    \"name\": \"directMessage\",\n                    \"id\": 104\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"AckCommand\",\n                    \"name\": \"ackMessage\",\n                    \"id\": 105\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"UnreadCommand\",\n                    \"name\": \"unreadMessage\",\n                    \"id\": 106\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"ReadCommand\",\n                    \"name\": \"readMessage\",\n                    \"id\": 107\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"RcpCommand\",\n                    \"name\": \"rcpMessage\",\n                    \"id\": 108\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"LogsCommand\",\n                    \"name\": \"logsMessage\",\n                    \"id\": 109\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"ConvCommand\",\n                    \"name\": \"convMessage\",\n                    \"id\": 110\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"RoomCommand\",\n                    \"name\": \"roomMessage\",\n                    \"id\": 111\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"PresenceCommand\",\n                    \"name\": \"presenceMessage\",\n                    \"id\": 112\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"ReportCommand\",\n                    \"name\": \"reportMessage\",\n                    \"id\": 113\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"PatchCommand\",\n                    \"name\": \"patchMessage\",\n                    \"id\": 114\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"PubsubCommand\",\n                    \"name\": \"pubsubMessage\",\n                    \"id\": 115\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"BlacklistCommand\",\n                    \"name\": \"blacklistMessage\",\n                    \"id\": 116\n                }\n            ]\n        }\n    ],\n    \"enums\": [\n        {\n            \"name\": \"CommandType\",\n            \"syntax\": \"proto2\",\n            \"values\": [\n                {\n                    \"name\": \"session\",\n                    \"id\": 0\n                },\n                {\n                    \"name\": \"conv\",\n                    \"id\": 1\n                },\n                {\n                    \"name\": \"direct\",\n                    \"id\": 2\n                },\n                {\n                    \"name\": \"ack\",\n                    \"id\": 3\n                },\n                {\n                    \"name\": \"rcp\",\n                    \"id\": 4\n                },\n                {\n                    \"name\": \"unread\",\n                    \"id\": 5\n                },\n                {\n                    \"name\": \"logs\",\n                    \"id\": 6\n                },\n                {\n                    \"name\": \"error\",\n                    \"id\": 7\n                },\n                {\n                    \"name\": \"login\",\n                    \"id\": 8\n                },\n                {\n                    \"name\": \"data\",\n                    \"id\": 9\n                },\n                {\n                    \"name\": \"room\",\n                    \"id\": 10\n                },\n                {\n                    \"name\": \"read\",\n                    \"id\": 11\n                },\n                {\n                    \"name\": \"presence\",\n                    \"id\": 12\n                },\n                {\n                    \"name\": \"report\",\n                    \"id\": 13\n                },\n                {\n                    \"name\": \"echo\",\n                    \"id\": 14\n                },\n                {\n                    \"name\": \"loggedin\",\n                    \"id\": 15\n                },\n                {\n                    \"name\": \"logout\",\n                    \"id\": 16\n                },\n                {\n                    \"name\": \"loggedout\",\n                    \"id\": 17\n                },\n                {\n                    \"name\": \"patch\",\n                    \"id\": 18\n                },\n                {\n                    \"name\": \"pubsub\",\n                    \"id\": 19\n                },\n                {\n                    \"name\": \"blacklist\",\n                    \"id\": 20\n                }\n            ]\n        },\n        {\n            \"name\": \"OpType\",\n            \"syntax\": \"proto2\",\n            \"values\": [\n                {\n                    \"name\": \"open\",\n                    \"id\": 1\n                },\n                {\n                    \"name\": \"add\",\n                    \"id\": 2\n                },\n                {\n                    \"name\": \"remove\",\n                    \"id\": 3\n                },\n                {\n                    \"name\": \"close\",\n                    \"id\": 4\n                },\n                {\n                    \"name\": \"opened\",\n                    \"id\": 5\n                },\n                {\n                    \"name\": \"closed\",\n                    \"id\": 6\n                },\n                {\n                    \"name\": \"query\",\n                    \"id\": 7\n                },\n                {\n                    \"name\": \"query_result\",\n                    \"id\": 8\n                },\n                {\n                    \"name\": \"conflict\",\n                    \"id\": 9\n                },\n                {\n                    \"name\": \"added\",\n                    \"id\": 10\n                },\n                {\n                    \"name\": \"removed\",\n                    \"id\": 11\n                },\n                {\n                    \"name\": \"refresh\",\n                    \"id\": 12\n                },\n                {\n                    \"name\": \"refreshed\",\n                    \"id\": 13\n                },\n                {\n                    \"name\": \"start\",\n                    \"id\": 30\n                },\n                {\n                    \"name\": \"started\",\n                    \"id\": 31\n                },\n                {\n                    \"name\": \"joined\",\n                    \"id\": 32\n                },\n                {\n                    \"name\": \"members_joined\",\n                    \"id\": 33\n                },\n                {\n                    \"name\": \"left\",\n                    \"id\": 39\n                },\n                {\n                    \"name\": \"members_left\",\n                    \"id\": 40\n                },\n                {\n                    \"name\": \"results\",\n                    \"id\": 42\n                },\n                {\n                    \"name\": \"count\",\n                    \"id\": 43\n                },\n                {\n                    \"name\": \"result\",\n                    \"id\": 44\n                },\n                {\n                    \"name\": \"update\",\n                    \"id\": 45\n                },\n                {\n                    \"name\": \"updated\",\n                    \"id\": 46\n                },\n                {\n                    \"name\": \"mute\",\n                    \"id\": 47\n                },\n                {\n                    \"name\": \"unmute\",\n                    \"id\": 48\n                },\n                {\n                    \"name\": \"status\",\n                    \"id\": 49\n                },\n                {\n                    \"name\": \"members\",\n                    \"id\": 50\n                },\n                {\n                    \"name\": \"max_read\",\n                    \"id\": 51\n                },\n                {\n                    \"name\": \"is_member\",\n                    \"id\": 52\n                },\n                {\n                    \"name\": \"member_info_update\",\n                    \"id\": 53\n                },\n                {\n                    \"name\": \"member_info_updated\",\n                    \"id\": 54\n                },\n                {\n                    \"name\": \"member_info_changed\",\n                    \"id\": 55\n                },\n                {\n                    \"name\": \"join\",\n                    \"id\": 80\n                },\n                {\n                    \"name\": \"invite\",\n                    \"id\": 81\n                },\n                {\n                    \"name\": \"leave\",\n                    \"id\": 82\n                },\n                {\n                    \"name\": \"kick\",\n                    \"id\": 83\n                },\n                {\n                    \"name\": \"reject\",\n                    \"id\": 84\n                },\n                {\n                    \"name\": \"invited\",\n                    \"id\": 85\n                },\n                {\n                    \"name\": \"kicked\",\n                    \"id\": 86\n                },\n                {\n                    \"name\": \"upload\",\n                    \"id\": 100\n                },\n                {\n                    \"name\": \"uploaded\",\n                    \"id\": 101\n                },\n                {\n                    \"name\": \"subscribe\",\n                    \"id\": 120\n                },\n                {\n                    \"name\": \"subscribed\",\n                    \"id\": 121\n                },\n                {\n                    \"name\": \"unsubscribe\",\n                    \"id\": 122\n                },\n                {\n                    \"name\": \"unsubscribed\",\n                    \"id\": 123\n                },\n                {\n                    \"name\": \"is_subscribed\",\n                    \"id\": 124\n                },\n                {\n                    \"name\": \"modify\",\n                    \"id\": 150\n                },\n                {\n                    \"name\": \"modified\",\n                    \"id\": 151\n                },\n                {\n                    \"name\": \"block\",\n                    \"id\": 170\n                },\n                {\n                    \"name\": \"unblock\",\n                    \"id\": 171\n                },\n                {\n                    \"name\": \"blocked\",\n                    \"id\": 172\n                },\n                {\n                    \"name\": \"unblocked\",\n                    \"id\": 173\n                },\n                {\n                    \"name\": \"members_blocked\",\n                    \"id\": 174\n                },\n                {\n                    \"name\": \"members_unblocked\",\n                    \"id\": 175\n                },\n                {\n                    \"name\": \"add_shutup\",\n                    \"id\": 180\n                },\n                {\n                    \"name\": \"remove_shutup\",\n                    \"id\": 181\n                },\n                {\n                    \"name\": \"query_shutup\",\n                    \"id\": 182\n                },\n                {\n                    \"name\": \"shutup_added\",\n                    \"id\": 183\n                },\n                {\n                    \"name\": \"shutup_removed\",\n                    \"id\": 184\n                },\n                {\n                    \"name\": \"shutup_result\",\n                    \"id\": 185\n                },\n                {\n                    \"name\": \"shutuped\",\n                    \"id\": 186\n                },\n                {\n                    \"name\": \"unshutuped\",\n                    \"id\": 187\n                },\n                {\n                    \"name\": \"members_shutuped\",\n                    \"id\": 188\n                },\n                {\n                    \"name\": \"members_unshutuped\",\n                    \"id\": 189\n                }\n            ]\n        },\n        {\n            \"name\": \"StatusType\",\n            \"syntax\": \"proto2\",\n            \"values\": [\n                {\n                    \"name\": \"on\",\n                    \"id\": 1\n                },\n                {\n                    \"name\": \"off\",\n                    \"id\": 2\n                }\n            ]\n        }\n    ],\n    \"isNamespace\": true\n}).build();\n","import messages from './message-compiled';\n\nconst {\n  JsonObjectMessage,\n  UnreadTuple,\n  LogItem,\n  DataCommand,\n  SessionCommand,\n  ErrorCommand,\n  DirectCommand,\n  AckCommand,\n  UnreadCommand,\n  ConvCommand,\n  RoomCommand,\n  LogsCommand,\n  RcpCommand,\n  ReadTuple,\n  MaxReadTuple,\n  ReadCommand,\n  PresenceCommand,\n  ReportCommand,\n  GenericCommand,\n  BlacklistCommand,\n  PatchCommand,\n  PatchItem,\n  ConvMemberInfo,\n  CommandType,\n  OpType,\n  StatusType,\n} = messages.push_server.messages2;\n\nexport {\n  JsonObjectMessage,\n  UnreadTuple,\n  LogItem,\n  DataCommand,\n  SessionCommand,\n  ErrorCommand,\n  DirectCommand,\n  AckCommand,\n  UnreadCommand,\n  ConvCommand,\n  RoomCommand,\n  LogsCommand,\n  RcpCommand,\n  ReadTuple,\n  MaxReadTuple,\n  ReadCommand,\n  PresenceCommand,\n  ReportCommand,\n  GenericCommand,\n  BlacklistCommand,\n  PatchCommand,\n  PatchItem,\n  ConvMemberInfo,\n  CommandType,\n  OpType,\n  StatusType,\n};\n","/* eslint-disable */\nexport default typeof global !== 'undefined' ? global :\n  typeof window !== 'undefined' ? window : {};\n","import d from 'debug';\n\nconst EXPIRED = Symbol('expired');\nconst debug = d('LC:Expirable');\nexport default class Expirable {\n  constructor(value, ttl) {\n    this.originalValue = value;\n    if (typeof ttl === 'number') {\n      this.expiredAt = Date.now() + ttl;\n    }\n  }\n\n  get value() {\n    const expired = this.expiredAt && this.expiredAt <= Date.now();\n    if (expired) debug(`expired: ${this.originalValue}`);\n    return expired ? EXPIRED : this.originalValue;\n  }\n}\nExpirable.EXPIRED = EXPIRED;\n","import d from 'debug';\nimport Expirable from './expirable';\n\nconst debug = d('LC:Cache');\nexport default class Cache {\n  constructor(name = 'anonymous') {\n    this.name = name;\n    this._map = {};\n  }\n\n  get(key) {\n    const cache = this._map[key];\n    if (cache) {\n      const { value } = cache;\n      if (value !== Expirable.EXPIRED) {\n        debug('[%s] hit: %s %O', this.name, key, value);\n        return value;\n      }\n      delete this._map[key];\n    }\n    debug(`[${this.name}] missed: ${key}`);\n    return null;\n  }\n\n  set(key, value, ttl) {\n    debug('[%s] set: %s %O %d', this.name, key, value, ttl);\n    this._map[key] = new Expirable(value, ttl);\n  }\n}\n","import isPlainObject from 'lodash/isPlainObject';\nimport global from './global';\n\nexport { global };\n\nexport const tryAll = (promiseConstructors) => {\n  const promise = new Promise(promiseConstructors[0]);\n  if (promiseConstructors.length === 1) {\n    return promise;\n  }\n  return promise.catch(() => tryAll(promiseConstructors.slice(1)));\n};\n\nexport const tap = interceptor => value => ((interceptor(value), value));\n\nexport { default as Expirable } from './expirable';\nexport { default as Cache } from './cache';\n\n/**\n * 将对象转换为 Date，支持 string、number、ProtoBuf Long 以及 LeanCloud 的 Date 类型，\n * 其他情况下（包括对象为 falsy）返回原值。\n * @private\n */\nexport const decodeDate = (date) => {\n  if (!date) return date;\n  if (typeof date === 'string' || typeof date === 'number') {\n    return new Date(date);\n  }\n  if (date.__type === 'Date' && date.iso) {\n    return new Date(date.iso);\n  }\n  // Long\n  if (typeof date.toNumber === 'function') {\n    return new Date(date.toNumber());\n  }\n  return date;\n};\n/**\n * 获取 Date 的毫秒数，如果不是一个 Date 返回 undefined。\n * @private\n */\nexport const getTime = date => ((date && date.getTime) ? date.getTime() : undefined);\n\n/**\n * 解码对象中的 LeanCloud 数据结构。\n * 目前仅会处理 Date 类型。\n * @private\n */\nexport const decode = (value) => {\n  if (!value) return value;\n  if (value.__type === 'Date' && value.iso) {\n    return new Date(value.iso);\n  }\n  if (isPlainObject(value)) {\n    return Object.keys(value).reduce((result, key) => ({\n      ...result,\n      [key]: decode(value[key]),\n    }), {});\n  }\n  return value;\n};\n/**\n * 将对象中的特殊类型编码为 LeanCloud 数据结构。\n * 目前仅会处理 Date 类型。\n * @private\n */\nexport const encode = (value) => {\n  if (value instanceof Date) return { __type: 'Date', iso: value.toJSON() };\n  if (isPlainObject(value)) {\n    return Object.keys(value).reduce((result, key) => ({\n      ...result,\n      [key]: encode(value[key]),\n    }), {});\n  }\n  return value;\n};\n\nexport const keyRemap = (keymap, obj) =>\n  Object.keys(obj).reduce((newObj, key) => {\n    const newKey = keymap[key] || key;\n    return Object.assign(newObj, {\n      [newKey]: obj[key],\n    });\n  }, {});\n\nexport const isIE10 = (\n  global.navigator &&\n  global.navigator.userAgent &&\n  global.navigator.userAgent.indexOf('MSIE 10.') !== -1\n);\n\n/* eslint-disable no-proto */\nexport const getStaticProperty = (klass, property) =>\n  (klass[property] || (klass.__proto__ ? getStaticProperty(klass.__proto__, property) : undefined));\n/* eslint-enable no-proto */\n\nexport const union = (a, b) => Array.from(new Set([...a, ...b]));\nexport const difference = (a, b) =>\n  Array.from((bSet => new Set(a.filter(x => !bSet.has(x))))(new Set(b)));\n\nconst map = new WeakMap();\n\n// protected property helper\nexport const internal = (object) => {\n  if (!map.has(object)) {\n    map.set(object, {});\n  }\n  return map.get(object);\n};\n\nexport const compact = (obj, filter) => {\n  if (!isPlainObject(obj)) return obj;\n  const object = Object.assign({}, obj);\n  // eslint-disable-next-line no-restricted-syntax\n  for (const prop in object) {\n    if ({}.hasOwnProperty.call(object, prop)) {\n      const value = object[prop];\n      if (value === filter) {\n        delete object[prop];\n      } else {\n        object[prop] = compact(value, filter);\n      }\n    }\n  }\n  return object;\n};\n\n// debug utility\nconst removeNull = obj => compact(obj, null);\nexport const trim = message => removeNull(JSON.parse(JSON.stringify(message)));\n\nexport const ensureArray = (target) => {\n  if (Array.isArray(target)) {\n    return target;\n  }\n  if (target === undefined || target === null) {\n    return [];\n  }\n  return [target];\n};\n\nexport const setValue = (target, key, value) => {\n  // '.' is not allowed in Class keys, escaping is not in concern now.\n  const segs = key.split('.');\n  const lastSeg = segs.pop();\n  let currentTarget = target;\n  segs.forEach((seg) => {\n    if (currentTarget[seg] === undefined) currentTarget[seg] = {};\n    currentTarget = currentTarget[seg];\n  });\n  currentTarget[lastSeg] = value;\n  return target;\n};\n\n// eslint-disable-next-line no-undef\nexport const isWeapp = typeof wx === 'object' && typeof wx.connectSocket === 'function';\n\n// throttle decorator\nexport const throttle = wait => (target, property, descriptor) => {\n  const callback = descriptor.value;\n  // very naive, internal use only\n  if (callback.length) {\n    throw new Error('throttled function should not accept any arguments');\n  }\n  return {\n    ...descriptor,\n    value() {\n      let {\n        throttleMeta,\n      } = internal(this);\n      if (!throttleMeta) {\n        throttleMeta = {};\n        internal(this).throttleMeta = throttleMeta;\n      }\n      let {\n        [property]: propertyMeta,\n      } = throttleMeta;\n      if (!propertyMeta) {\n        propertyMeta = {};\n        throttleMeta[property] = propertyMeta;\n      }\n      const {\n        previouseTimestamp = 0,\n        timeout,\n      } = propertyMeta;\n      const now = Date.now();\n      const remainingTime = wait - (now - previouseTimestamp);\n      if (remainingTime <= 0) {\n        throttleMeta[property].previouseTimestamp = now;\n        callback.apply(this);\n      } else if (!timeout) {\n        propertyMeta.timeout = setTimeout(() => {\n          propertyMeta.previouseTimestamp = Date.now();\n          delete propertyMeta.timeout;\n          callback.apply(this);\n        }, remainingTime);\n      }\n    },\n  };\n};\n","// WebSocket with auto reconnecting feature, backup endpoint and EventEmitter interface.\n\nimport d from 'debug';\nimport EventEmitter from 'eventemitter3';\nimport StateMachine from 'javascript-state-machine';\n\nimport WebSocket from 'ws';\n\nimport { ensureArray, tryAll, global } from './utils';\n\nconst debug = d('LC:WebSocketPlus');\n\nconst HEARTBEAT_TIME = 180000;\nconst TIMEOUT_TIME = 380000;\n\nconst DEFAULT_RETRY_STRATEGY = attempt => Math.min(1000 * (2 ** attempt), 300000);\n\nconst requireConnected = (target, name, descriptor) =>\n  Object.assign({}, descriptor, {\n    value: function requireConnectedWrapper(...args) {\n      this.checkConnectionAvailability(name);\n      return descriptor.value.call(this, ...args);\n    },\n  });\n\nclass WebSocketPlus extends EventEmitter {\n  constructor(getUrls, protocol) {\n    if (typeof WebSocket === 'undefined') {\n      throw new Error('WebSocket is undefined. Polyfill is required in this runtime.');\n    }\n    super();\n    if (typeof getUrls !== 'function') {\n      this._getUrls = () => Promise.resolve(getUrls);\n    } else {\n      this._getUrls = getUrls;\n    }\n    this._protocol = protocol;\n    this.init();\n    this._createWs(this._getUrls, this._protocol).then(() => {\n      this.__postponeTimeoutTimer = this._postponeTimeoutTimer.bind(this);\n      if (global.addEventListener) {\n        this.__pause = () => this.pause();\n        this.__resume = () => this.resume();\n        global.addEventListener('offline', this.__pause);\n        global.addEventListener('online', this.__resume);\n      }\n      this.open();\n    }).catch(this.throw.bind(this));\n  }\n\n  _createWs(getUrls, protocol) {\n    return getUrls().then(urls => tryAll(ensureArray(urls).map(url => (resolve, reject) => {\n      debug(`connect [${url}] ${protocol}`);\n      const ws = protocol ? new WebSocket(url, protocol) : new WebSocket(url);\n      ws.binaryType = this.binaryType || 'arraybuffer';\n      ws.onopen = () => resolve(ws);\n      ws.onclose = (error) => {\n        if (error instanceof Error) {\n          return reject(error);\n        }\n        // in browser, error event is useless\n        return reject(new Error(`Failed to connect [${url}]`));\n      };\n      ws.onerror = ws.onclose;\n    })).then((ws) => {\n      this._ws = ws;\n      this._ws.onclose = this._handleClose.bind(this);\n      this._ws.onmessage = this._handleMessage.bind(this);\n      return ws;\n    }));\n  }\n  _destroyWs() {\n    const ws = this._ws;\n    if (!ws) return;\n    ws.onopen = null;\n    ws.onclose = null;\n    ws.onerror = null;\n    ws.onmessage = null;\n    this._ws = null;\n    ws.close();\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  onbeforeevent(event, from, to, ...payload) {\n    debug(`${event}: ${from} -> ${to}`, ...payload);\n  }\n  onopen() {\n    this.emit('open');\n  }\n  onconnected() {\n    this._startConnectionKeeper();\n  }\n  onleaveconnected(event, from, to) {\n    this._stopConnectionKeeper();\n    this._destroyWs();\n    if (to === 'offline' || to === 'disconnected') {\n      this.emit('disconnect');\n    }\n  }\n  onpause() {\n    this.emit('offline');\n  }\n  onbeforeresume() {\n    this.emit('online');\n  }\n  onreconnect() {\n    this.emit('reconnect');\n  }\n  ondisconnected(event, from, to, attempt = 0) {\n    const delay = DEFAULT_RETRY_STRATEGY.call(null, attempt);\n    debug(`schedule attempt=${attempt} delay=${delay}`);\n    this.emit('schedule', attempt, delay);\n    if (this.__scheduledRetry) {\n      clearTimeout(this.__scheduledRetry);\n    }\n    this.__scheduledRetry = setTimeout(() => {\n      if (this.is('disconnected')) {\n        this.retry(attempt);\n      }\n    }, delay);\n  }\n  onretry(event, from, to, attempt = 0) {\n    this.emit('retry', attempt);\n    this._createWs(this._getUrls, this._protocol).then(\n      () => (this.can('reconnect') ? this.reconnect() : this._destroyWs()),\n      () => this.can('fail') && this.fail(attempt + 1),\n    );\n  }\n  onerror(event, from, to, error) {\n    this.emit('error', error);\n  }\n  onclose() {\n    if (global.removeEventListener) {\n      if (this.__pause) global.removeEventListener('offline', this.__pause);\n      if (this.__resume) global.removeEventListener('online', this.__resume);\n    }\n  }\n\n  checkConnectionAvailability(name = 'API') {\n    if (!this.is('connected')) {\n      const currentState = this.current;\n      console.warn(`${name} should not be called when the connection is ${currentState}`);\n      if (this.is('disconnected') || this.is('reconnecting')) {\n        console.warn('disconnect and reconnect event should be handled to avoid such calls.');\n      }\n      throw new Error('Connection unavailable');\n    }\n  }\n\n  // jsdoc-ignore-start\n  @requireConnected\n  // jsdoc-ignore-end\n  _ping() {\n    debug('ping');\n    try {\n      this.ping();\n    } catch (error) {\n      console.warn(`websocket ping error: ${error.message}`);\n    }\n  }\n  ping() {\n    if (this._ws.ping) {\n      this._ws.ping();\n    } else {\n      console.warn(`The WebSocket implement does not support sending ping frame.\n        Override ping method to use application defined ping/pong mechanism.`);\n    }\n  }\n\n  _postponeTimeoutTimer() {\n    debug('_postponeTimeoutTimer');\n    this._clearTimeoutTimers();\n    this._timeoutTimer = setTimeout(() => {\n      debug('timeout');\n      this.disconnect();\n    }, TIMEOUT_TIME);\n  }\n  _clearTimeoutTimers() {\n    if (this._timeoutTimer) {\n      clearTimeout(this._timeoutTimer);\n    }\n  }\n  _startConnectionKeeper() {\n    debug('start connection keeper');\n    this._heartbeatTimer = setInterval(this._ping.bind(this), HEARTBEAT_TIME);\n    const addListener = this._ws.addListener || this._ws.addEventListener;\n    addListener.call(this._ws, 'message', this.__postponeTimeoutTimer);\n    addListener.call(this._ws, 'pong', this.__postponeTimeoutTimer);\n    this._postponeTimeoutTimer();\n  }\n  _stopConnectionKeeper() {\n    debug('stop connection keeper');\n    // websockets/ws#489\n    const removeListener = this._ws.removeListener || this._ws.removeEventListener;\n    removeListener.call(this._ws, 'message', this.__postponeTimeoutTimer);\n    removeListener.call(this._ws, 'pong', this.__postponeTimeoutTimer);\n    this._clearTimeoutTimers();\n    if (this._heartbeatTimer) {\n      clearInterval(this._heartbeatTimer);\n    }\n  }\n\n  _handleClose(event) {\n    debug(`ws closed [${event.code}] ${event.reason}`);\n    // socket closed manually, ignore close event.\n    if (this.isFinished()) return;\n    this.handleClose(event);\n  }\n  handleClose() {\n    // reconnect\n    this.disconnect();\n  }\n\n  // jsdoc-ignore-start\n  @requireConnected\n  // jsdoc-ignore-end\n  send(data) {\n    debug('send', data);\n    this._ws.send(data);\n  }\n\n  _handleMessage(event) {\n    debug('message', event.data);\n    this.handleMessage(event.data);\n  }\n  handleMessage(message) {\n    this.emit('message', message);\n  }\n}\n\nStateMachine.create({\n  target: WebSocketPlus.prototype,\n  initial: {\n    state: 'initialized',\n    event: 'init',\n    defer: true,\n  },\n  terminal: 'closed',\n  events: [{\n    name: 'open',\n    from: 'initialized',\n    to: 'connected',\n  }, {\n    name: 'disconnect',\n    from: 'connected',\n    to: 'disconnected',\n  }, {\n    name: 'retry',\n    from: 'disconnected',\n    to: 'reconnecting',\n  }, {\n    name: 'fail',\n    from: 'reconnecting',\n    to: 'disconnected',\n  }, {\n    name: 'reconnect',\n    from: 'reconnecting',\n    to: 'connected',\n  }, {\n    name: 'pause',\n    from: ['connected', 'disconnected', 'reconnecting'],\n    to: 'offline',\n  }, {\n  }, {\n    name: 'resume',\n    from: 'offline',\n    to: 'disconnected',\n  }, {\n    name: 'close',\n    from: ['connected', 'disconnected', 'reconnecting', 'offline'],\n    to: 'closed',\n  }, {\n    name: 'throw',\n    from: '*',\n    to: 'error',\n  }],\n});\n\nexport default WebSocketPlus;\n","export const error = Object.freeze({\n  1000: {\n    name: 'CLOSE_NORMAL',\n  },\n  1006: {\n    name: 'CLOSE_ABNORMAL',\n  },\n  4100: {\n    name: 'APP_NOT_AVAILABLE',\n    message: 'App not exists or realtime message service is disabled.',\n  },\n  4103: {\n    name: 'INVALID_LOGIN',\n    message: 'Malformed clientId.',\n  },\n  4105: {\n    name: 'SESSION_REQUIRED',\n    message: 'Message sent before session opened.',\n  },\n  4107: {\n    name: 'READ_TIMEOUT',\n  },\n  4108: {\n    name: 'LOGIN_TIMEOUT',\n  },\n  4109: {\n    name: 'FRAME_TOO_LONG',\n  },\n  4110: {\n    name: 'INVALID_ORIGIN',\n    message: 'Access denied by domain whitelist.',\n  },\n  4111: {\n    name: 'SESSION_CONFLICT',\n  },\n  4112: {\n    name: 'SESSION_TOKEN_EXPIRED',\n  },\n  4200: {\n    name: 'INTERNAL_ERROR',\n    message: 'Internal error, please contact LeanCloud for support.',\n  },\n  4201: {\n    name: 'SEND_MESSAGE_TIMEOUT',\n  },\n  4302: {\n    name: 'CONVERSATION_SIGNATURE_FAILED',\n  },\n  4303: {\n    name: 'CONVERSATION_NOT_FOUND',\n  },\n  4304: {\n    name: 'CONVERSATION_FULL',\n  },\n  4305: {\n    name: 'CONVERSATION_REJECTED_BY_APP',\n  },\n  4306: {\n    name: 'CONVERSATION_UPDATE_FAILED',\n  },\n  4307: {\n    name: 'CONVERSATION_READ_ONLY',\n  },\n  4308: {\n    name: 'CONVERSATION_NOT_ALLOWED',\n  },\n  4317: {\n    name: 'CONVERSATION_EXPIRED',\n    message: 'Temporary conversation expired or does not exist.',\n  },\n  4401: {\n    name: 'INVALID_MESSAGING_TARGET',\n  },\n  4402: {\n    name: 'MESSAGE_REJECTED_BY_APP',\n  },\n});\n\nexport const ErrorCode = Object.freeze(Object.keys(error).reduce(\n  (result, code) => Object.assign(result, {\n    [error[code].name]: Number(code),\n  }),\n  {},\n));\n\nexport const createError = (errorMessage) => {\n  const {\n    code, reason, appCode, detail,\n  } = errorMessage;\n  let message = reason || detail;\n  if (!message && error[code]) {\n    message = error[code].message || error[code].name;\n  }\n  if (!message) {\n    message = `Unknow Error: ${code}`;\n  }\n  const err = new Error(message);\n  return Object.assign(err, {\n    code, appCode, detail,\n  });\n};\n","import d from 'debug';\nimport WebSocketPlus from './websocket-plus';\nimport { createError } from './error';\nimport { GenericCommand, CommandType } from '../proto/message';\nimport { trim, isWeapp } from './utils';\n\nconst debug = d('LC:Connection');\n\nconst COMMAND_TIMEOUT = 20000;\n\nexport default class Connection extends WebSocketPlus {\n  constructor(getUrl, { format, version }) {\n    debug('initializing Connection');\n    const protocolString = `lc.${format}.${version}`;\n    if (!isWeapp) {\n      super(getUrl, protocolString);\n    } else {\n      super(getUrl().then(urls => urls.map(url =>\n        `${url}${url.indexOf('?') === -1 ? '?' : '&'}subprotocol=${encodeURIComponent(protocolString)}`)));\n    }\n    this._protocalFormat = format;\n    this._commands = {};\n    this._serialId = 0;\n  }\n\n  send(command, waitingForRespond = true) {\n    let serialId;\n    if (waitingForRespond) {\n      this._serialId += 1;\n      serialId = this._serialId;\n      command.i = serialId; // eslint-disable-line no-param-reassign\n    }\n    debug('↑ %O sent', trim(command));\n\n    let message;\n    if (this._protocalFormat === 'proto2base64') {\n      message = command.toBase64();\n    } else if (command.toArrayBuffer) {\n      message = command.toArrayBuffer();\n    }\n    if (!message) {\n      throw new TypeError(`${command} is not a GenericCommand`);\n    }\n\n    super.send(message);\n\n    if (!waitingForRespond) {\n      return Promise.resolve();\n    }\n    return new Promise((resolve, reject) => {\n      this._commands[serialId] = {\n        resolve,\n        reject,\n        timeout: setTimeout(\n          () => {\n            if (this._commands[serialId]) {\n              debug('✗ %O timeout', trim(command));\n              reject(new Error('Command Timeout.'));\n              delete this._commands[serialId];\n            }\n          },\n          COMMAND_TIMEOUT,\n        ),\n      };\n    });\n  }\n\n  handleMessage(msg) {\n    let message;\n    try {\n      message = GenericCommand.decode(msg);\n      debug('↓ %O received', trim(message));\n    } catch (e) {\n      console.warn('Decode message failed', msg);\n    }\n    this.emit('allmessage', message);\n    const serialId = message.i;\n    if (serialId) {\n      if (this._commands[serialId]) {\n        clearTimeout(this._commands[serialId].timeout);\n        if (message.cmd === CommandType.error) {\n          this\n            ._commands[serialId]\n            .reject(createError(message.errorMessage));\n        } else {\n          this\n            ._commands[serialId]\n            .resolve(message);\n        }\n        delete this._commands[serialId];\n      } else {\n        console.warn(`Unexpected command received with serialId [${serialId}],\n         which have timed out or never been requested.`);\n      }\n    } else if (message.cmd === CommandType.error) {\n      this.emit('error', createError(message.errorMessage));\n    } else {\n      this.emit('message', message);\n    }\n  }\n\n  ping() {\n    return this.send(new GenericCommand({\n      cmd: CommandType.echo,\n    })).catch(error => debug('ping failed:', error));\n  }\n}\n","/* eslint-disable max-len */\n\n/**\n * 插件接口\n *\n * <p>\n * 插件是由一个或多个扩展点组成的字典。SDK 的扩展点可以分为两类：\n * <p>\n * 第一类扩展点是类实例化之后的回调，包括 <code>Realtime</code>、<code>IMClient</code> 与 <code>Conversation</code>。这些扩展点可以通过一个同步的 Decorator 进行扩展。Decorator 接受一个对应的实例并对其进行一些操作。\n * 特别的，由于注册自定义消息类这个需求特别的常用，额外定义一个 messageClasses 扩展点来做这件事情。\n * <p>\n * 第二类扩展点是在某些事件处理前、后可以注入逻辑的点。\n * 其中 <code>beforeMessageParse</code>，<code>afterMessageParse</code> 可以通过一个异步的 Middleware 进行扩展。Middleware 接受一个对象，返回一个同类型对象或同类型对象的 Promise。\n * <code>beforeMessageDispatch</code> 可以通过返回一个 boolean 类型的 shouldDispatch 值来控制是否要继续派发收到的消息。\n * <p>\n * 如果使用了多个插件，这些 hook 会按照插件数组的顺序依次执行。前一个 Middleware 的返回值会作为参数传给后一个 Middleware。\n *\n * @interface Plugin\n * @since 3.1.0\n */\n\n/* eslint-enable max-len */\n\n/**\n * 插件名称，用于在日志中显示异常的插件\n *\n * @name Plugin.name\n * @type string\n */\n\n/**\n * 插件注册的消息类型\n *\n * @name Plugin.messageClasses\n * @type AVMessage[]\n */\n\n/**\n * 在 Realtime 实例化后对其进行修饰。\n * <p>\n * 接受一个参数为 Realtime 实例。\n *\n * @name Plugin.onRealtimeCreate\n * @type Function\n */\n\n/**\n * 在 IMClient 实例化后对其进行修饰。\n * <p>\n * 接受一个参数为 IMClient 实例。\n *\n * @name Plugin.onIMClientCreate\n * @type Function\n */\n\n/**\n * 在 Conversation 实例化后对其进行修饰。\n * <p>\n * 接受一个参数为 Conversation 实例。\n * 需要注意的是，该扩展点并不是在 <code>{@link IMClient#createConversation}</code> 方法创建成功后调用的 hook，\n * 而是所有的 Conversation 实例化的时候（包括但不限于 query 时）调用的 hook。\n *\n * @name Plugin.onConversationCreate\n * @type Function\n */\n\n/**\n * 在对消息进行 parse 之前，对原始消息进行修改。\n * <p>\n * 接受一个参数为原始消息，是某个消息的内容，一般是一个 JSON 对象。\n * 该方法需要返回一个 JSON 对象。如果这个结果是异步得到的，也可以返回一个 Promise(fulfilled with a JSON)。\n *\n * @name Plugin.beforeMessageParse\n * @type Function\n */\n\n/**\n * 在对消息进行 parse 之后，对消息实例进行修改。\n * <p>\n * 接受一个参数为消息实例，一般是一个已注册的 Message 类或其子类的实例。\n * 该方法需要返回一个同类型的消息实例。如果这个结果是异步得到的，也可以返回一个 Promise。\n *\n * @name Plugin.afterMessageParse\n * @type Function\n */\n\n/**\n * 在收到消息之后，派发消息之前，控制是否派发这条消息。\n * <p>\n * 接受参数为 message 与 conversation。\n * 该方法需要返回 boolean 类型的值，如果返回 false 则 SDK 不再派发这条消息，后续的 beforeMessageDispatch 也不会执行。\n * 如果这个结果是异步得到的，也可以返回一个 Promise。\n *\n * @name Plugin.beforeMessageDispatch\n * @type Function\n * @since 3.4.0\n */\n\nimport { ensureArray, tap } from './utils';\n\nconst checkType = middleware => (param) => {\n  const { constructor } = param;\n  return Promise.resolve(param).then(middleware).then(tap((result) => {\n    if (result === undefined || result === null) {\n      // eslint-disable-next-line max-len\n      return console.warn(`Middleware[${middleware._pluginName || 'anonymous plugin'}:${middleware.name || 'anonymous middleware'}] param/return types not match. It returns ${result} while a ${param.constructor.name} expected.`);\n    }\n    if (!(result instanceof constructor)) {\n      // eslint-disable-next-line max-len\n      return console.warn(`Middleware[${middleware._pluginName || 'anonymous plugin'}:${middleware.name || 'anonymous middleware'}] param/return types not match. It returns a ${result.constructor.name} while a ${param.constructor.name} expected.`);\n    }\n    return 0;\n  }));\n};\n\nexport const applyDecorators = (decorators, target) => {\n  if (decorators) {\n    decorators.forEach((decorator) => {\n      try {\n        decorator(target);\n      } catch (error) {\n        if (decorator._pluginName) {\n          error.message += `[${decorator._pluginName}]`;\n        }\n        throw error;\n      }\n    });\n  }\n};\n\nexport const applyMiddlewares = middlewares => target =>\n  ensureArray(middlewares).reduce(\n    (previousPromise, middleware) => previousPromise\n      .then(checkType(middleware))\n      .catch((error) => {\n        if (middleware._pluginName) {\n          // eslint-disable-next-line no-param-reassign\n          error.message += `[${middleware._pluginName}]`;\n        }\n        throw error;\n      }),\n    Promise.resolve(target),\n  );\n\nexport const applyDispatcher = (dispatchers, payload) =>\n  ensureArray(dispatchers).reduce(\n    (resultPromise, dispatcher) => resultPromise.then(shouldDispatch =>\n      (shouldDispatch === false ? false : dispatcher(...payload))).catch((error) => {\n      if (dispatcher._pluginName) {\n        // eslint-disable-next-line no-param-reassign\n        error.message += `[${dispatcher._pluginName}]`;\n      }\n      throw error;\n    }),\n    Promise.resolve(true),\n  );\n","import d from 'debug';\nimport EventEmitter from 'eventemitter3';\nimport axios from 'axios';\nimport shuffle from 'lodash/shuffle';\nimport Connection from './connection';\nimport { ErrorCode, createError } from './error';\nimport { tap, Cache, trim, internal, ensureArray, isWeapp } from './utils';\nimport { applyDecorators, applyDispatcher } from './plugin';\n\nconst debug = d('LC:Realtime');\nconst debugRequest = d('LC:request');\n\nconst routerCache = new Cache('push-router');\n\nexport default class Realtime extends EventEmitter {\n  /**\n   * @extends EventEmitter\n   * @param  {Object} options\n   * @param  {String} options.appId\n   * @param  {String} options.appKey （since 4.0.0）\n   * @param  {String} [options.region='cn'] 节点 id\n   * @param  {Boolean} [options.pushOfflineMessages=false] 启用推送离线消息模式（默认为发送未读消息通知模式）\n   * @param  {Boolean} [options.noBinary=false] 设置 WebSocket 使用字符串格式收发消息（默认为二进制格式）。\n   *                                            适用于 WebSocket 实现不支持二进制数据格式的情况\n   * @param  {Boolean} [options.ssl=true] 使用 wss 进行连接\n   * @param  {String} [options.server] 指定私有部署的服务器域名（since 4.0.0）\n   * @param  {String|String[]} [options.RTMServers] 指定私有部署的 RTM 服务器地址（since 4.0.0）\n   * @param  {Plugin[]} [options.plugins] 加载插件（since 3.1.0）\n   */\n  constructor(options) {\n    debug('initializing Realtime');\n    super();\n    if (typeof options.appId !== 'string') {\n      throw new TypeError(`appId [${options.appId}] is not a string`);\n    }\n    if (typeof options.appKey !== 'string') {\n      throw new TypeError(`appKey [${options.appKey}] is not a string`);\n    }\n    this._options = Object.assign({\n      appId: undefined,\n      appKey: undefined,\n      region: 'cn',\n      pushOfflineMessages: false,\n      noBinary: false,\n      ssl: true,\n      RTMServerName: process.env.RTM_SERVER_NAME, // undocumented on purpose, internal use only\n    }, options);\n    this._cache = new Cache('endpoints');\n    internal(this).clients = new Set();\n    this._plugins = [\n      ...ensureArray(Realtime.__preRegisteredPlugins),\n      ...ensureArray(options.plugins),\n    ].reduce(\n      (result, plugin) => {\n        // eslint-disable-next-line no-restricted-syntax\n        for (const hook in plugin) {\n          if ({}.hasOwnProperty.call(plugin, hook) && hook !== 'name') {\n            if (plugin.name) {\n              ensureArray(plugin[hook]).forEach((value) => {\n                // eslint-disable-next-line no-param-reassign\n                value._pluginName = plugin.name;\n              });\n            }\n            // eslint-disable-next-line no-param-reassign\n            result[hook] = ensureArray(result[hook]).concat(plugin[hook]);\n          }\n        }\n        return result;\n      },\n      {},\n    );\n    // onRealtimeCreate hook\n    applyDecorators(this._plugins.onRealtimeCreate, this);\n  }\n\n  async _request({\n    method,\n    version = '1.1',\n    path,\n    query,\n    headers,\n    data = {},\n  }) {\n    const { appId, region } = this._options;\n    const { api } = await this.constructor._getServerUrls({ appId, region });\n    const url = `https://${api}/${version}${path}`;\n    const options = {\n      method,\n      params: query,\n      headers: {\n        'X-LC-Id': this._options.appId,\n        'X-LC-Key': this._options.appKey,\n        ...headers,\n      },\n      data,\n    };\n    debugRequest('Req: %O %O', url, options);\n    return axios(url, options).then(\n      (response) => {\n        debugRequest('Res: %O %O %O', url, response.status, response.data);\n        return response.data;\n      },\n      (error) => {\n        debugRequest('Error: %O %O %O', url, error.response.status, error.response.data);\n        if (error.response && error.response.data && error.response.data.code) {\n          throw createError(error.response.data);\n        }\n        throw error;\n      },\n    );\n  }\n\n  _open() {\n    if (this._openPromise) return this._openPromise;\n\n    let format = 'protobuf2';\n    if (this._options.noBinary) {\n      // 不发送 binary data，fallback to base64 string\n      format = 'proto2base64';\n    }\n    let version = 3;\n    if (this._options.pushOfflineMessages) {\n      // 不推送离线消息，而是发送对话的未读通知\n      version = 1;\n    }\n    const protocol = {\n      format,\n      version,\n    };\n    this._openPromise = new Promise((resolve, reject) => {\n      debug('No connection established, create a new one.');\n      const connection = new Connection(\n        () => this._getRTMServers(this._options),\n        protocol,\n      );\n      connection.on('open', () => resolve(connection));\n      connection.on('error', reject);\n      connection.on('message', this._dispatchCommand.bind(this));\n      /**\n       * 连接断开。\n       * 连接断开可能是因为 SDK 进入了离线状态（see {@link Realtime#event:offline}），或长时间没有收到服务器心跳。\n       * 连接断开后所有的网络操作都会失败，请在连接断开后禁用相关的 UI 元素。\n       * @event Realtime#disconnect\n       */\n      /**\n       * 计划在一段时间后尝试重新连接\n       * @event Realtime#schedule\n       * @param {Number} attempt 尝试重连的次数\n       * @param {Number} delay 延迟的毫秒数\n       */\n      /**\n       * 正在尝试重新连接\n       * @event Realtime#retry\n       * @param {Number} attempt 尝试重连的次数\n       */\n      /**\n       * 连接恢复正常。\n       * 请重新启用在 {@link Realtime#event:disconnect} 事件中禁用的相关 UI 元素\n       * @event Realtime#reconnect\n       */\n\n      /**\n       * 客户端连接断开\n       * @event IMClient#disconnect\n       * @see Realtime#event:disconnect\n       * @since 3.2.0\n       */\n      /**\n       * 计划在一段时间后尝试重新连接\n       * @event IMClient#schedule\n       * @param {Number} attempt 尝试重连的次数\n       * @param {Number} delay 延迟的毫秒数\n       * @since 3.2.0\n       */\n      /**\n       * 正在尝试重新连接\n       * @event IMClient#retry\n       * @param {Number} attempt 尝试重连的次数\n       * @since 3.2.0\n       */\n\n      /**\n       * 客户端进入离线状态。\n       * 这通常意味着网络已断开，或者 {@link Realtime#pause} 被调用\n       * @event Realtime#offline\n       * @since 3.4.0\n       */\n      /**\n       * 客户端恢复在线状态\n       * 这通常意味着网络已恢复，或者 {@link Realtime#resume} 被调用\n       * @event Realtime#online\n       * @since 3.4.0\n       */\n      /**\n       * 进入离线状态。\n       * 这通常意味着网络已断开，或者 {@link Realtime#pause} 被调用\n       * @event IMClient#offline\n       * @since 3.4.0\n       */\n      /**\n       * 恢复在线状态\n       * 这通常意味着网络已恢复，或者 {@link Realtime#resume} 被调用\n       * @event IMClient#online\n       * @since 3.4.0\n       */\n\n      // event proxy\n      ['disconnect', 'reconnect', 'retry', 'schedule', 'offline', 'online'].forEach(event => connection.on(event, (...payload) => {\n        debug(`${event} event emitted. %O`, payload);\n        this.emit(event, ...payload);\n        if (event !== 'reconnect') {\n          internal(this).clients.forEach((client) => {\n            client.emit(event, ...payload);\n          });\n        }\n      }));\n      // override handleClose\n      connection.handleClose = function handleClose(event) {\n        const isFatal = [\n          ErrorCode.APP_NOT_AVAILABLE,\n          ErrorCode.INVALID_LOGIN,\n          ErrorCode.INVALID_ORIGIN,\n        ].some(errorCode => errorCode === event.code);\n        if (isFatal) {\n          // in these cases, SDK should throw.\n          this.throw(createError(event));\n        } else {\n          // reconnect\n          this.disconnect();\n        }\n      };\n      internal(this).connection = connection;\n    });\n\n    return this._openPromise;\n  }\n\n  async _getRTMServers(options) {\n    if (options.RTMServers) return shuffle(ensureArray(options.RTMServers));\n    let info;\n    const cachedEndPoints = this._cache.get('endpoints');\n    if (cachedEndPoints) {\n      info = await cachedEndPoints;\n    } else {\n      info = await this.constructor._fetchRTMServers(options);\n      this._cache.set('endpoints', info, info.ttl * 1000);\n    }\n    debug('endpoint info: %O', info);\n    return [info.server, info.secondary];\n  }\n\n  static async _getServerUrls({ appId, region, server }) {\n    debug('fetch server urls');\n    if (server) {\n      if (typeof server !== 'string') return server;\n      return {\n        RTMRouter: server,\n        api: server,\n      };\n    }\n    switch (region) {\n      case 'cn': {\n        const cachedRouter = routerCache.get(appId);\n        if (cachedRouter) return cachedRouter;\n        return axios\n          .get('https://app-router.leancloud.cn/2/route', {\n            params: {\n              appId,\n            },\n            timeout: 20000,\n          })\n          .then(res => res.data)\n          .then(tap(debug))\n          .then(({\n            rtm_router_server: RTMRouter,\n            api_server: api,\n            ttl = 3600,\n          }) => {\n            if (!RTMRouter) {\n              throw new Error('rtm router not exists');\n            }\n            const serverUrls = {\n              RTMRouter,\n              api,\n            };\n            routerCache.set(appId, serverUrls, ttl * 1000);\n            return serverUrls;\n          })\n          .catch(() => {\n            const id = appId.slice(0, 8).toLowerCase();\n            return {\n              RTMRouter: `${id}.rtm.lncld.net`,\n              api: `${id}.api.lncld.net`,\n            };\n          });\n      }\n      case 'us':\n        return {\n          RTMRouter: 'router-a0-push.leancloud.cn',\n          api: 'us-api.leancloud.cn',\n        };\n      default:\n        throw new Error(`Region [${region}] is not supported.`);\n    }\n  }\n\n  static _fetchRTMServers({\n    appId, region, ssl, server, RTMServerName,\n  }) {\n    debug('fetch endpoint info');\n    return this._getServerUrls({ appId, region, server })\n      .then(tap(debug))\n      .then(({ RTMRouter }) =>\n        axios.get(`https://${RTMRouter}/v1/route`, {\n          params: {\n            appId,\n            secure: ssl,\n            features: isWeapp ? 'wechat' : undefined,\n            server: RTMServerName,\n            _t: Date.now(),\n          },\n          timeout: 20000,\n        }).then(res => res.data).then(tap(debug)));\n  }\n\n  _close() {\n    if (this._openPromise) {\n      this._openPromise.then(connection => connection.close());\n    }\n    delete this._openPromise;\n  }\n\n  /**\n   * 手动进行重连。\n   * SDK 在网络出现异常时会自动按照一定的时间间隔尝试重连，调用该方法会立即尝试重连并重置重连尝试计数器。\n   * 只能在 `schedule` 事件之后，`retry` 事件之前调用，如果当前网络正常或者正在进行重连，调用该方法会抛异常。\n   */\n  retry() {\n    const { connection } = internal(this);\n    if (!connection) {\n      throw new Error('no connection established');\n    }\n    if (connection.cannot('retry')) {\n      throw new Error(`retrying not allowed when not disconnected. the connection is now ${connection.current}`);\n    }\n    return connection.retry();\n  }\n  /**\n   * 暂停，使 SDK 进入离线状态。\n   * 你可以在网络断开、应用进入后台等时刻调用该方法让 SDK 进入离线状态，离线状态下不会尝试重连。\n   * 在浏览器中 SDK 会自动监听网络变化，因此无需手动调用该方法。\n   *\n   * @since 3.4.0\n   * @see Realtime#event:offline\n   */\n  pause() {\n    // 这个方法常常在网络断开、进入后台时被调用，此时 connection 可能没有建立或者已经 close。\n    // 因此不像 retry，这个方法应该尽可能 loose\n    const { connection } = internal(this);\n    if (!connection) return;\n    if (connection.can('pause')) connection.pause();\n  }\n  /**\n   * 恢复在线状态。\n   * 你可以在网络恢复、应用回到前台等时刻调用该方法让 SDK 恢复在线状态，恢复在线状态后 SDK 会开始尝试重连。\n   *\n   * @since 3.4.0\n   * @see Realtime#event:online\n   */\n  resume() {\n    // 与 pause 一样，这个方法应该尽可能 loose\n    const { connection } = internal(this);\n    if (!connection) return;\n    if (connection.can('resume')) connection.resume();\n  }\n\n  _register(client) {\n    internal(this).clients.add(client);\n  }\n\n  _deregister(client) {\n    internal(this).clients.delete(client);\n    if (internal(this).clients.size === 0) {\n      this._close();\n    }\n  }\n\n  _dispatchCommand(command) {\n    return applyDispatcher(this._plugins.beforeCommandDispatch, [command, this])\n      .then((shouldDispatch) => {\n        // no plugin handled this command\n        if (shouldDispatch) return debug('[WARN] Unexpected message received: %O', trim(command));\n        return false;\n      });\n  }\n}\n","import uuid from 'uuid/v4';\nimport { ensureArray, decodeDate, getTime } from '../utils';\n\n\n/**\n * 消息状态枚举\n * @enum {Symbol}\n * @since 3.2.0\n * @memberof module:leancloud-realtime\n */\nconst MessageStatus = {\n  /** 初始状态、未知状态 */\n  NONE: Symbol('none'),\n  /** 正在发送 */\n  SENDING: Symbol('sending'),\n  /** 已发送 */\n  SENT: Symbol('sent'),\n  /** 已送达 */\n  DELIVERED: Symbol('delivered'),\n  /** 发送失败 */\n  FAILED: Symbol('failed'),\n};\nObject.freeze(MessageStatus);\n\nconst rMessageStatus = {\n  [MessageStatus.NONE]: true,\n  [MessageStatus.SENDING]: true,\n  [MessageStatus.SENT]: true,\n  [MessageStatus.DELIVERED]: true,\n  [MessageStatus.READ]: true,\n  [MessageStatus.FAILED]: true,\n};\n\nexport { MessageStatus };\nexport default class Message {\n  /**\n   * @implements AVMessage\n   * @param  {Object|String|ArrayBuffer} content 消息内容\n   */\n  constructor(content) {\n    Object.assign(this, { content }, {\n      /**\n       * @type {String}\n       * @memberof Message#\n       */\n      id: uuid(),\n      /**\n       * 消息所在的 conversation id\n       * @memberof Message#\n       * @type {String?}\n       */\n      cid: null,\n      /**\n       * 消息发送时间\n       * @memberof Message#\n       * @type {Date}\n       */\n      timestamp: new Date(),\n      /**\n       * 消息发送者\n       * @memberof Message#\n       * @type {String}\n       */\n      from: undefined,\n      /**\n       * 消息提及的用户\n       * @since 4.0.0\n       * @memberof Message#\n       * @type {String[]}\n       */\n      mentionList: [],\n      /**\n       * 消息是否提及了所有人\n       * @since 4.0.0\n       * @memberof Message#\n       * @type {Boolean}\n       */\n      mentionedAll: false,\n      _mentioned: false,\n    });\n    this._setStatus(MessageStatus.NONE);\n  }\n\n  /**\n   * 将当前消息的内容序列化为 JSON 对象\n   * @private\n   * @return {Object}\n   */\n  getPayload() {\n    return this.content;\n  }\n\n  _toJSON() {\n    const {\n      id,\n      cid,\n      from,\n      timestamp,\n      deliveredAt,\n      updatedAt,\n      mentionList,\n      mentionedAll,\n      mentioned,\n    } = this;\n    return {\n      id,\n      cid,\n      from,\n      timestamp,\n      deliveredAt,\n      updatedAt,\n      mentionList,\n      mentionedAll,\n      mentioned,\n    };\n  }\n\n  /**\n   * 返回 JSON 格式的消息\n   * @return {Object} 返回值是一个 plain Object\n   */\n  toJSON() {\n    return {\n      ...this._toJSON(),\n      data: this.content,\n    };\n  }\n\n  /**\n   * 返回 JSON 格式的消息，与 toJSON 不同的是，该对象包含了完整的信息，可以通过 {@link IMClient#parseMessage} 反序列化。\n   * @return {Object} 返回值是一个 plain Object\n   * @since 4.0.0\n   */\n  toFullJSON() {\n    const {\n      content,\n      id,\n      cid,\n      from,\n      timestamp,\n      deliveredAt,\n      _updatedAt,\n      mentionList,\n      mentionedAll,\n    } = this;\n    return ({\n      data: content,\n      id,\n      cid,\n      from,\n      timestamp: getTime(timestamp),\n      deliveredAt: getTime(deliveredAt),\n      updatedAt: getTime(_updatedAt),\n      mentionList,\n      mentionedAll,\n    });\n  }\n\n  /**\n   * 消息状态，值为 {@link module:leancloud-realtime.MessageStatus} 之一\n   * @type {Symbol}\n   * @readonly\n   * @since 3.2.0\n   */\n  get status() {\n    return this._status;\n  }\n\n  _setStatus(status) {\n    if (!rMessageStatus[status]) {\n      throw new Error('Invalid message status');\n    }\n    this._status = status;\n  }\n\n  get timestamp() {\n    return this._timestamp;\n  }\n  set timestamp(value) {\n    this._timestamp = decodeDate(value);\n  }\n\n  /**\n   * 消息送达时间\n   * @type {?Date}\n   */\n  get deliveredAt() {\n    return this._deliveredAt;\n  }\n  set deliveredAt(value) {\n    this._deliveredAt = decodeDate(value);\n  }\n\n  /**\n   * 消息修改或撤回时间，可以通过比较其与消息的 timestamp 是否相等判断消息是否被修改过或撤回过。\n   * @type {Date}\n   * @since 3.5.0\n   */\n  get updatedAt() {\n    return this._updatedAt || this.timestamp;\n  }\n  set updatedAt(value) {\n    this._updatedAt = decodeDate(value);\n  }\n\n  /**\n   * 当前用户是否在该消息中被提及\n   * @type {Boolean}\n   * @readonly\n   * @since 4.0.0\n   */\n  get mentioned() {\n    return this._mentioned;\n  }\n  _updateMentioned(client) {\n    this._mentioned =\n      this.from !== client &&\n      (this.mentionedAll || this.mentionList.indexOf(client) > -1);\n  }\n  /**\n   * 获取提及用户列表\n   * @since 4.0.0\n   * @return {String[]} 提及用户的 id 列表\n   */\n  getMentionList() {\n    return this.mentionList;\n  }\n  /**\n   * 设置提及用户列表\n   * @since 4.0.0\n   * @param {String[]} clients 提及用户的 id 列表\n   * @return {this} self\n   */\n  setMentionList(clients) {\n    this.mentionList = ensureArray(clients);\n    return this;\n  }\n  /**\n   * 设置是否提及所有人\n   * @since 4.0.0\n   * @param {Boolean} [value=true]\n   * @return {this} self\n   */\n  mentionAll(value = true) {\n    this.mentionedAll = Boolean(value);\n    return this;\n  }\n\n  /**\n   * 判断给定的内容是否是有效的 Message，\n   * 该方法始终返回 true\n   * @private\n   * @returns {Boolean}\n   * @implements AVMessage.validate\n   */\n  static validate() {\n    return true;\n  }\n\n  /**\n   * 解析处理消息内容\n   * <pre>\n   * 如果子类提供了 message，返回该 message\n   * 如果没有提供，将 json 作为 content 实例化一个 Message\n   * @private\n   * @param  {Object}  json    json 格式的消息内容\n   * @param  {Message} message 子类提供的 message\n   * @return {Message}\n   * @implements AVMessage.parse\n   */\n  static parse(json, message) {\n    return message || new this(json);\n  }\n}\n","/* eslint-disable no-param-reassign */\nimport { getStaticProperty, isIE10 } from '../utils';\n\n// documented in ../index.js\nexport const messageType = (type) => {\n  if (typeof type !== 'number') {\n    throw new TypeError(`${type} is not a Number`);\n  }\n  return (target) => {\n    target.TYPE = type;\n    target.validate = json => (json._lctype === type);\n    target.prototype._getType = () => ({ _lctype: type });\n  };\n};\n\n// documented in ../index.js\nexport const messageField = (fields) => {\n  if (typeof fields !== 'string') {\n    if (!Array.isArray(fields)) {\n      throw new TypeError(`${fields} is not an Array`);\n    } else if (fields.some(value => typeof value !== 'string')) {\n      throw new TypeError('fields contains non-string typed member');\n    }\n  }\n  return (target) => {\n    // IE10 Hack:\n    // static properties in IE10 will not be inherited from super\n    // search for parse method and assign it manually\n    let originalCustomFields = isIE10\n      ? getStaticProperty(target, '_customFields')\n      : target._customFields;\n    originalCustomFields = Array.isArray(originalCustomFields)\n      ? originalCustomFields : [];\n    target._customFields = originalCustomFields.concat(fields);\n  };\n};\n\n// IE10 Hack:\n// static properties in IE10 will not be inherited from super\n// search for parse method and assign it manually\n\nexport const IE10Compatible = (target) => {\n  if (isIE10) {\n    target.parse = getStaticProperty(target, 'parse');\n  }\n};\n","import Message from './message';\nimport { messageField } from './helpers';\nimport { getStaticProperty, isIE10, compact } from '../utils';\n\n// jsdoc-ignore-start\n@messageField(['_lctext', '_lcattrs'])\n// jsdoc-ignore-end\n/**\n * 所有内置的富媒体消息均继承自本类\n * @extends Message\n */\nclass TypedMessage extends Message {\n  /**\n   * @type {Number}\n   * @readonly\n   */\n  get type() {\n    return this.constructor.TYPE;\n  }\n\n  /** @type {String} */\n  set text(text) {\n    return this.setText(text);\n  }\n  get text() {\n    return this.getText();\n  }\n\n  /** @type {Object} */\n  set attributes(attributes) {\n    return this.setAttributes(attributes);\n  }\n  get attributes() {\n    return this.getAttributes();\n  }\n\n  /**\n   * 在客户端需要以文本形式展示该消息时显示的文案，\n   * 如 <code>[红包] 新春快乐</code>。\n   * 默认值为消息的 text。\n   * @type {String}\n   * @readonly\n   */\n  get summary() {\n    return this.text;\n  }\n\n  /**\n   * @param {String} text\n   * @return {this} self\n   */\n  setText(text) {\n    this._lctext = text;\n    return this;\n  }\n  /**\n   * @return {String}\n   */\n  getText() {\n    return this._lctext;\n  }\n\n  /**\n   * @param {Object} attributes\n   * @return {this} self\n   */\n  setAttributes(attributes) {\n    this._lcattrs = attributes;\n    return this;\n  }\n  /**\n   * @return {Object}\n   */\n  getAttributes() {\n    return this._lcattrs;\n  }\n\n  _getCustomFields() {\n    const fields = Array.isArray(this.constructor._customFields)\n      ? this.constructor._customFields : [];\n    return fields.reduce((result, field) => {\n      if (typeof field !== 'string') return result;\n      result[field] = this[field]; // eslint-disable-line no-param-reassign\n      return result;\n    }, {});\n  }\n\n  /* eslint-disable class-methods-use-this */\n  _getType() {\n    throw new Error('not implemented');\n  }\n  /* eslint-enable class-methods-use-this */\n\n  getPayload() {\n    return compact(Object.assign({\n      _lctext: this.getText(),\n      _lcattrs: this.getAttributes(),\n    }, this._getCustomFields(), this._getType()));\n  }\n\n  toJSON() {\n    const {\n      type,\n      text,\n      attributes,\n      summary,\n    } = this;\n    return {\n      ...super._toJSON(),\n      type,\n      text,\n      attributes,\n      summary,\n    };\n  }\n\n  toFullJSON() {\n    return {\n      ...super.toFullJSON(),\n      data: this.getPayload(),\n    };\n  }\n\n  /**\n   * 解析处理消息内容\n   * <pre>\n   * 为给定的 message 设置 text 与 attributes 属性，返回该 message\n   * 如果子类没有提供 message，new this()\n   * @protected\n   * @param  {Object}  json    json 格式的消息内容\n   * @param  {TypedMessage} message 子类提供的 message\n   * @return {TypedMessage}\n   * @implements AVMessage.parse\n   */\n  static parse(json, message = new this()) {\n    message.content = json; // eslint-disable-line no-param-reassign\n    const customFields = isIE10\n      ? getStaticProperty(message.constructor, '_customFields')\n      : message.constructor._customFields;\n    let fields = Array.isArray(customFields) ? customFields : [];\n    fields = fields.reduce((result, field) => {\n      if (typeof field !== 'string') return result;\n      result[field] = json[field]; // eslint-disable-line no-param-reassign\n      return result;\n    }, {});\n    Object.assign(message, fields);\n    return super.parse(json, message);\n  }\n}\n\nexport default TypedMessage;\n","import TypedMessage from './typed-message';\nimport { messageType } from './helpers';\n\n// jsdoc-ignore-start\n@messageType(-127)\n// jsdoc-ignore-end\n/**\n * 已撤回类型消息，当消息被撤回时，SDK 会使用该类型的消息替代原始消息\n * @extends TypedMessage\n */\nclass RecalledMessage extends TypedMessage {\n  /**\n   * 在客户端需要以文本形式展示该消息时显示的文案，值为 <code>[该消息已撤回]</code>\n   * @type {String}\n   * @readonly\n   */\n  // eslint-disable-next-line class-methods-use-this\n  get summary() {\n    return '[该消息已撤回]';\n  }\n}\nexport default RecalledMessage;\n","import EventEmitter from 'eventemitter3';\nimport d from 'debug';\nimport { decodeDate, getTime, internal } from '../utils';\nimport { applyDecorators } from '../plugin';\nimport IMClient from '../im-client';\nimport {\n  GenericCommand,\n  ConvCommand,\n  DirectCommand,\n  LogsCommand,\n  PatchCommand,\n  PatchItem,\n  CommandType,\n  OpType,\n} from '../../proto/message';\nimport { createError } from '../error';\nimport Message, { MessageStatus } from '../messages/message';\nimport RecalledMessage from '../messages/recalled-message';\n\nconst debug = d('LC:Conversation');\n\nconst serializeMessage = (message) => {\n  const content = message.getPayload();\n  let msg;\n  let binaryMsg;\n  if (content instanceof ArrayBuffer) {\n    binaryMsg = content;\n  } else if (typeof content !== 'string') {\n    msg = JSON.stringify(content);\n  } else {\n    msg = content;\n  }\n  return { msg, binaryMsg };\n};\n\nconst {\n  NEW,\n  OLD,\n} = LogsCommand.QueryDirection;\n\n/**\n * 历史消息查询方向枚举\n * @enum {Number}\n * @since 4.0.0\n * @memberof module:leancloud-realtime\n */\nconst MessageQueryDirection = {\n  /** 从后向前 */\n  NEW_TO_OLD: OLD,\n  /** 从前向后 */\n  OLD_TO_NEW: NEW,\n};\nObject.freeze(MessageQueryDirection);\n\nexport { MessageQueryDirection };\n\nexport default class ConversationBase extends EventEmitter {\n  /**\n   * @extends EventEmitter\n   * @private\n   * @abstract\n   */\n  constructor({\n    id,\n    lastMessageAt,\n    lastMessage,\n    lastDeliveredAt,\n    lastReadAt,\n    unreadMessagesCount = 0,\n    members = [],\n    mentioned = false,\n    ...properties\n  }, client) {\n    super();\n    Object.assign(this, {\n      /**\n       * 对话 id，对应 _Conversation 表中的 objectId\n       * @memberof ConversationBase#\n       * @type {String}\n       */\n      id,\n      /**\n       * 最后一条消息时间\n       * @memberof ConversationBase#\n       * @type {?Date}\n       */\n      lastMessageAt,\n      /**\n       * 最后一条消息\n       * @memberof ConversationBase#\n       * @type {?Message}\n       */\n      lastMessage,\n      /**\n       * 参与该对话的用户列表\n       * @memberof ConversationBase#\n       * @type {String[]}\n       */\n      members,\n      // other properties provided by subclasses\n      ...properties,\n    });\n    this.members = Array.from(new Set(this.members));\n    Object.assign(internal(this), {\n      messagesWaitingForReceipt: {},\n      lastDeliveredAt,\n      lastReadAt,\n      unreadMessagesCount,\n      mentioned,\n    });\n    if (client instanceof IMClient) {\n      this._client = client;\n    } else {\n      throw new TypeError('Conversation must be initialized with a client');\n    }\n    [\n      'kicked',\n      'membersjoined',\n      'membersleft',\n      'memberinfoupdated',\n      'blocked',\n      'unblocked',\n      'membersblocked',\n      'membersunblocked',\n      'muted',\n      'unmuted',\n      'membersmuted',\n      'membersunmuted',\n      'message',\n      'receipt',\n      'lastdeliveredatupdate',\n      'lastreadatupdate',\n      'messagerecall',\n      'messageupdate',\n      'infoupdated',\n    ].forEach(event => this.on(\n      event,\n      (...payload) => this._debug(`${event} event emitted. %O`, payload),\n    ));\n    // onConversationCreate hook\n    applyDecorators(this._client._plugins.onConversationCreate, this);\n  }\n\n  /**\n   * 当前用户是否在该对话的未读消息中被提及\n   * @type {Boolean}\n   * @since 4.0.0\n   */\n  get unreadMessagesMentioned() {\n    return internal(this).unreadMessagesMentioned;\n  }\n  _setUnreadMessagesMentioned(value) {\n    internal(this).unreadMessagesMentioned = Boolean(value);\n  }\n\n  set unreadMessagesCount(value) {\n    if (value !== this.unreadMessagesCount) {\n      internal(this).unreadMessagesCount = value;\n      this._client.emit('unreadmessagescountupdate', [this]);\n    }\n  }\n  /**\n   * 当前用户在该对话的未读消息数\n   * @type {Number}\n   */\n  get unreadMessagesCount() {\n    return internal(this).unreadMessagesCount;\n  }\n\n  set lastMessageAt(value) {\n    const time = decodeDate(value);\n    if (time <= this._lastMessageAt) return;\n    this._lastMessageAt = time;\n  }\n  get lastMessageAt() {\n    return this._lastMessageAt;\n  }\n  /**\n   * 最后消息送达时间，常用来实现消息的「已送达」标记，可通过 {@link Conversation#fetchReceiptTimestamps} 获取或更新该属性\n   * @type {?Date}\n   * @since 3.4.0\n   */\n  get lastDeliveredAt() {\n    if (this.members.length !== 2) return null;\n    return internal(this).lastDeliveredAt;\n  }\n  _setLastDeliveredAt(value) {\n    const date = decodeDate(value);\n    if (!(date < internal(this).lastDeliveredAt)) {\n      internal(this).lastDeliveredAt = date;\n      /**\n       * 最后消息送达时间更新\n       * @event Conversation#lastdeliveredatupdate\n       * @since 3.4.0\n       */\n      this.emit('lastdeliveredatupdate');\n    }\n  }\n  /**\n   * 最后消息被阅读时间，常用来实现发送消息的「已读」标记，可通过 {@link Conversation#fetchReceiptTimestamps} 获取或更新该属性\n   * @type {?Date}\n   * @since 3.4.0\n   */\n  get lastReadAt() {\n    if (this.members.length !== 2) return null;\n    return internal(this).lastReadAt;\n  }\n  _setLastReadAt(value) {\n    const date = decodeDate(value);\n    if (!(date < internal(this).lastReadAt)) {\n      internal(this).lastReadAt = date;\n      /**\n       * 最后消息被阅读时间更新\n       * @event Conversation#lastreadatupdate\n       * @since 3.4.0\n       */\n      this.emit('lastreadatupdate');\n    }\n  }\n\n  /**\n   * 返回 JSON 格式的对话，与 toJSON 不同的是，该对象包含了完整的信息，可以通过 {@link IMClient#parseConversation} 反序列化。\n   * @return {Object} 返回值是一个 plain Object\n   * @since 4.0.0\n   */\n  toFullJSON() {\n    const {\n      id, members,\n      lastMessageAt, lastDeliveredAt, lastReadAt,\n      lastMessage, unreadMessagesCount,\n    } = this;\n    return {\n      id,\n      members,\n      lastMessageAt: getTime(lastMessageAt),\n      lastDeliveredAt: getTime(lastDeliveredAt),\n      lastReadAt: getTime(lastReadAt),\n      lastMessage: lastMessage ? lastMessage.toFullJSON() : undefined,\n      unreadMessagesCount,\n    };\n  }\n\n  /**\n   * 返回 JSON 格式的对话\n   * @return {Object} 返回值是一个 plain Object\n   * @since 4.0.0\n   */\n  toJSON() {\n    const {\n      id, members,\n      lastMessageAt, lastDeliveredAt, lastReadAt,\n      lastMessage, unreadMessagesCount, unreadMessagesMentioned,\n    } = this;\n    return {\n      id,\n      members,\n      lastMessageAt,\n      lastDeliveredAt,\n      lastReadAt,\n      lastMessage: lastMessage ? lastMessage.toJSON() : undefined,\n      unreadMessagesCount,\n      unreadMessagesMentioned,\n    };\n  }\n\n  _debug(...params) {\n    debug(...params, `[${this.id}]`);\n  }\n\n  _send(command, ...args) {\n    /* eslint-disable no-param-reassign */\n    if (command.cmd === null) {\n      command.cmd = 'conv';\n    }\n    if (command.cmd === 'conv' && command.convMessage === null) {\n      command.convMessage = new ConvCommand();\n    }\n    if (command.convMessage && command.convMessage.cid === null) {\n      command.convMessage.cid = this.id;\n    }\n    /* eslint-enable no-param-reassign */\n    return this._client._send(command, ...args);\n  }\n\n  /**\n   * 发送消息\n   * @param  {Message} message 消息，Message 及其子类的实例\n   * @param {Object} [options] since v3.3.0，发送选项\n   * @param {Boolean} [options.transient] since v3.3.1，是否作为暂态消息发送\n   * @param {Boolean} [options.receipt] 是否需要回执，仅在普通对话中有效\n   * @param {Boolean} [options.will] since v3.4.0，是否指定该消息作为「掉线消息」发送，\n   * 「掉线消息」会延迟到当前用户掉线后发送，常用来实现「下线通知」功能\n   * @param {MessagePriority} [options.priority] 消息优先级，仅在暂态对话中有效，\n   * see: {@link module:leancloud-realtime.MessagePriority MessagePriority}\n   * @param {Object} [options.pushData] 消息对应的离线推送内容，如果消息接收方不在线，会推送指定的内容。其结构说明参见: {@link https://url.leanapp.cn/pushData 推送消息内容}\n   * @return {Promise.<Message>} 发送的消息\n   */\n  async send(message, options) {\n    this._debug(message, 'send');\n    if (!(message instanceof Message)) {\n      throw new TypeError(`${message} is not a Message`);\n    }\n    const {\n      transient,\n      receipt,\n      priority,\n      pushData,\n      will,\n    } = Object.assign(\n      {},\n      // support Message static property: sendOptions\n      message.constructor.sendOptions,\n      // support Message static property: getSendOptions\n      typeof message.constructor.getSendOptions === 'function' ? message.constructor.getSendOptions(message) : {},\n      options,\n    );\n    if (receipt) {\n      if (this.transient) {\n        console.warn('receipt option is ignored as the conversation is transient.');\n      } else if (transient) {\n        console.warn('receipt option is ignored as the message is sent transiently.');\n      } else if (this.members.length > 2) {\n        console.warn('receipt option is recommended to be used in one-on-one conversation.'); // eslint-disable-line max-len\n      }\n    }\n    if (priority && !this.transient) {\n      console.warn('priority option is ignored as the conversation is not transient.');\n    }\n    Object.assign(message, {\n      cid: this.id,\n      from: this._client.id,\n    });\n    message._setStatus(MessageStatus.SENDING);\n    const { msg, binaryMsg } = serializeMessage(message);\n    const command = new GenericCommand({\n      cmd: 'direct',\n      directMessage: new DirectCommand({\n        msg,\n        binaryMsg,\n        cid: this.id,\n        r: receipt,\n        transient,\n        dt: message.id,\n        pushData: JSON.stringify(pushData),\n        will,\n        mentionPids: message.mentionList,\n        mentionAll: message.mentionedAll,\n      }),\n      priority,\n    });\n    try {\n      const resCommand = await this._send(command);\n      if (!transient) {\n        const {\n          ackMessage: {\n            uid,\n            t,\n            code,\n            reason,\n            appCode,\n          },\n        } = resCommand;\n        if (code !== null) {\n          throw createError({\n            code, reason, appCode,\n          });\n        }\n        Object.assign(message, {\n          id: uid,\n          timestamp: t,\n        });\n        this.lastMessage = message;\n        this.lastMessageAt = message.timestamp;\n      }\n      message._setStatus(MessageStatus.SENT);\n      if (receipt) {\n        internal(this).messagesWaitingForReceipt[message.id] = message;\n      }\n      return message;\n    } catch (error) {\n      message._setStatus(MessageStatus.FAILED);\n      throw error;\n    }\n  }\n\n  async _update(message, newMessage, recall) {\n    this._debug('patch %O %O %O', message, newMessage, recall);\n    if (message instanceof Message) {\n      if (message.from !== this._client.id) {\n        throw new Error('Updating message from others is not allowed');\n      }\n      if (message.status !== MessageStatus.SENT && message.status !== MessageStatus.DELIVERED) {\n        throw new Error('Message is not sent');\n      }\n    } else if (!(message.id && message.timestamp)) {\n      throw new TypeError(`${message} is not a Message`);\n    }\n    let msg;\n    let binaryMsg;\n    if (!recall) {\n      const content = serializeMessage(newMessage);\n      ({ msg, binaryMsg } = content);\n    }\n    await this._send(new GenericCommand({\n      cmd: CommandType.patch,\n      op: OpType.modify,\n      patchMessage: new PatchCommand({\n        patches: [new PatchItem({\n          cid: this.id,\n          mid: message.id,\n          timestamp: Number(message.timestamp),\n          recall,\n          data: msg,\n          binaryMsg,\n          mentionPids: newMessage.mentionList,\n          mentionAll: newMessage.mentionedAll,\n        })],\n        lastPatchTime: this._client._lastPatchTime,\n      }),\n    }));\n    const {\n      id, cid, timestamp, from, _status,\n    } = message;\n    Object.assign(newMessage, {\n      id, cid, timestamp, from, _status,\n    });\n    if (this.lastMessage.id === newMessage.id) {\n      this.lastMessage = newMessage;\n    }\n    return newMessage;\n  }\n\n  /**\n   * 获取对话人数，或暂态对话的在线人数\n   * @return {Promise.<Number>}\n   */\n  async count() {\n    this._debug('count');\n    const resCommand = await this._send(new GenericCommand({\n      op: 'count',\n    }));\n    return resCommand.convMessage.count;\n  }\n\n  /**\n   * 修改已发送的消息\n   * @param {AVMessage} message 要修改的消息，该消息必须是由当前用户发送的。也可以提供一个包含消息 {id, timestamp} 的对象\n   * @param {AVMessage} newMessage 新的消息\n   * @return {Promise.<AVMessage>} 更新后的消息\n   */\n  async update(message, newMessage) {\n    if (!(newMessage instanceof Message)) {\n      throw new TypeError(`${newMessage} is not a Message`);\n    }\n    return this._update(message, newMessage, false);\n  }\n\n  /**\n   * 撤回已发送的消息\n   * @param {AVMessage} message 要撤回的消息，该消息必须是由当前用户发送的。也可以提供一个包含消息 {id, timestamp} 的对象\n   * @return {Promise.<RecalledMessage>} 一条已撤回的消息\n   */\n  async recall(message) {\n    return this._update(message, new RecalledMessage(), true);\n  }\n\n  /**\n   * 查询消息记录\n   * 如果仅需实现消息向前记录翻页查询需求，建议使用 {@link Conversation#createMessagesIterator}。\n   * 不论何种方向，获得的消息都是按照时间升序排列的。\n   * startClosed 与 endClosed 用于指定查询区间的开闭。\n   *\n   * @param  {Object} [options]\n   * @param  {Number} [options.limit] 限制查询结果的数量，目前服务端默认为 20\n   * @param  {MessageQueryDirection} [options.direction] 查询的方向。\n   * 在不指定的情况下如果 startTime 大于 endTime，则为从新到旧查询，可以实现加载聊天记录等场景。\n   * 如果 startTime 小于 endTime，则为从旧到新查询，可以实现弹幕等场景。\n   * @param  {Date}   [options.startTime] 从该时间开始查询，不传则从当前时间开始查询\n   * @param  {String} [options.startMessageId] 从该消息之前开始查询，需要与 startTime 同时使用，为防止某时刻有重复消息\n   * @param  {Boolean}[options.startClosed] 指定查询范围是否包括开始的时间点，默认不包括\n   * @param  {Date}   [options.endTime] 查询到该时间为止，不传则查询最早消息为止\n   * @param  {String} [options.endMessageId] 查询到该消息为止，需要与 endTime 同时使用，为防止某时刻有重复消息\n   * @param  {Boolean}[options.endClosed] 指定查询范围是否包括结束的时间点，默认不包括\n   *\n   * @param  {Date}   [options.beforeTime] DEPRECATED: 使用 startTime 代替。限制查询结果为小于该时间之前的消息，不传则为当前时间\n   * @param  {String} [options.beforeMessageId] DEPRECATED: 使用 startMessageId 代替。\n   * 限制查询结果为该消息之前的消息，需要与 beforeTime 同时使用，为防止某时刻有重复消息\n   * @param  {Date}   [options.afterTime] DEPRECATED: 使用 endTime 代替。限制查询结果为大于该时间之前的消息\n   * @param  {String} [options.afterMessageId] DEPRECATED: 使用 endMessageId 代替。\n   * 限制查询结果为该消息之后的消息，需要与 afterTime 同时使用，为防止某时刻有重复消息\n   * @return {Promise.<Message[]>} 消息列表\n   */\n  async queryMessages(options = {}) {\n    this._debug('query messages %O', options);\n    const {\n      beforeTime,\n      beforeMessageId,\n      afterTime,\n      afterMessageId,\n      limit,\n      direction,\n      startTime,\n      startMessageId,\n      startClosed,\n      endTime,\n      endMessageId,\n      endClosed,\n    } = options;\n    if (beforeMessageId || beforeTime || afterMessageId || afterTime) {\n      console.log('DEPRECATION: queryMessages options beforeTime, beforeMessageId, afterTime and afterMessageId are deprecated in favor of startTime, startMessageId, endTime and endMessageId.');\n      return this.queryMessages({\n        startTime: beforeTime,\n        startMessageId: beforeMessageId,\n        endTime: afterTime,\n        endMessageId: afterMessageId,\n        limit,\n      });\n    }\n    if (startMessageId && !startTime) {\n      throw new Error('query option startMessageId must be used with option startTime');\n    }\n    if (endMessageId && !endTime) {\n      throw new Error('query option endMessageId must be used with option endTime');\n    }\n    const conditions = {\n      t: startTime,\n      mid: startMessageId,\n      tIncluded: startClosed,\n      tt: endTime,\n      tmid: endMessageId,\n      ttIncluded: endClosed,\n      l: limit,\n    };\n    if (conditions.t instanceof Date) {\n      conditions.t = conditions.t.getTime();\n    }\n    if (conditions.tt instanceof Date) {\n      conditions.tt = conditions.tt.getTime();\n    }\n    if (direction !== undefined) {\n      conditions.direction = direction;\n    } else if (conditions.tt > conditions.t) {\n      conditions.direction = MessageQueryDirection.OLD_TO_NEW;\n    }\n    const resCommand = await this._send(new GenericCommand({\n      cmd: 'logs',\n      logsMessage: new LogsCommand(Object.assign(conditions, {\n        cid: this.id,\n      })),\n    }));\n    return Promise.all(resCommand.logsMessage.logs.map(async ({\n      msgId,\n      timestamp,\n      patchTimestamp,\n      from,\n      ackAt,\n      readAt,\n      data,\n      mentionAll,\n      mentionPids,\n      bin,\n    }) => {\n      const messageData = {\n        data,\n        bin,\n        id: msgId,\n        cid: this.id,\n        timestamp,\n        from,\n        deliveredAt: ackAt,\n        updatedAt: patchTimestamp,\n        mentionList: mentionPids,\n        mentionedAll: mentionAll,\n      };\n      const message = await this._client.parseMessage(messageData);\n      let status = MessageStatus.SENT;\n      if (this.members.length === 2) {\n        if (ackAt) status = MessageStatus.DELIVERED;\n        if (ackAt) this._setLastDeliveredAt(ackAt);\n        if (readAt) this._setLastReadAt(readAt);\n      }\n      message._setStatus(status);\n      return message;\n    }));\n  }\n\n  /**\n   * 获取消息翻页迭代器\n   * @param  {Object} [options]\n   * @param  {Date}   [options.beforeTime] 限制起始查询结果为小于该时间之前的消息，不传则为当前时间\n   * @param  {String} [options.beforeMessageId] 限制起始查询结果为该消息之前的消息，需要与 beforeTime 同时使用，为防止某时刻有重复消息\n   * @param  {Number} [options.limit] 限制每页查询结果的数量，目前服务端默认为 20\n   * @return {AsyncIterater.<Promise.<IteratorResult<Message[]>>>} [AsyncIterator]{@link https://github.com/tc39/proposal-async-iteration}，调用其 next 方法返回获取下一页消息的 Promise\n   * @example\n   * var messageIterator = conversation.createMessagesIterator({ limit: 10 });\n   * messageIterator.next().then(function(result) {\n   *   // result: {\n   *   //   value: [message1, ..., message10],\n   *   //   done: false,\n   *   // }\n   * });\n   * messageIterator.next().then(function(result) {\n   *   // result: {\n   *   //   value: [message11, ..., message20],\n   *   //   done: false,\n   *   // }\n   * });\n   * messageIterator.next().then(function(result) {\n   *   // No more messages\n   *   // result: { value: [], done: true }\n   * });\n   */\n  createMessagesIterator({ beforeTime, beforeMessageId, limit } = {}) {\n    let promise;\n    return {\n      next: () => {\n        if (promise === undefined) {\n          // first call\n          promise = this.queryMessages({\n            limit,\n            startTime: beforeTime,\n            startMessageId: beforeMessageId,\n          });\n        } else {\n          promise = promise.then((prevMessages) => {\n            if (prevMessages.length === 0 || prevMessages.length < limit) {\n              // no more messages\n              return [];\n            }\n            return this.queryMessages({\n              startTime: prevMessages[0].timestamp,\n              startMessageId: prevMessages[0].id,\n              limit,\n            });\n          });\n        }\n        return promise.then(value => ({\n          value: Array.from(value),\n          done: value.length === 0 || value.length < limit,\n        }));\n      },\n    };\n  }\n\n  /**\n   * 将该会话标记为已读\n   * @return {Promise.<this>} self\n   */\n  async read() {\n    this.unreadMessagesCount = 0;\n    this._setUnreadMessagesMentioned(false);\n    // 跳过暂态会话\n    if (this.transient) return this;\n    const client = this._client;\n    if (!internal(client).readConversationsBuffer) {\n      internal(client).readConversationsBuffer = new Set();\n    }\n    internal(client).readConversationsBuffer.add(this);\n    client._doSendRead();\n    return this;\n  }\n\n  _handleReceipt({ messageId, timestamp, read }) {\n    if (read) {\n      this._setLastReadAt(timestamp);\n    } else {\n      this._setLastDeliveredAt(timestamp);\n    }\n    const { messagesWaitingForReceipt } = internal(this);\n    const message = messagesWaitingForReceipt[messageId];\n    if (!message) return;\n    message._setStatus(MessageStatus.DELIVERED);\n    message.deliveredAt = timestamp;\n    delete messagesWaitingForReceipt[messageId];\n  }\n\n  /**\n   * 更新对话的最新回执时间戳（lastDeliveredAt、lastReadAt）\n   * @since 3.4.0\n   * @return {Promise.<this>} this\n   */\n  async fetchReceiptTimestamps() {\n    const {\n      convMessage: {\n        maxReadTimestamp,\n        maxAckTimestamp,\n      },\n    } = await this._send(new GenericCommand({\n      op: 'max_read',\n    }));\n    this._setLastDeliveredAt(maxAckTimestamp);\n    this._setLastReadAt(maxReadTimestamp);\n    return this;\n  }\n\n  _fetchAllReceiptTimestamps() {\n    const convMessage = new ConvCommand({\n      queryAllMembers: true,\n    });\n    return this._send(new GenericCommand({\n      op: 'max_read',\n      convMessage,\n    })).then(({\n      convMessage: {\n        maxReadTuples,\n      },\n    }) => maxReadTuples\n      .filter(maxReadTuple => maxReadTuple.maxAckTimestamp || maxReadTuple.maxReadTimestamp)\n      .map(({ pid, maxAckTimestamp, maxReadTimestamp }) => ({\n        pid,\n        lastDeliveredAt: decodeDate(maxAckTimestamp),\n        lastReadAt: decodeDate(maxReadTimestamp),\n      })));\n  }\n}\n","import { internal } from './utils';\n\n/**\n * 对话成员角色枚举\n * @enum {String}\n * @since 4.0.0\n * @memberof module:leancloud-realtime\n */\nconst ConversationMemberRole = {\n  /** 管理员 */\n  MANAGER: 'Manager',\n  /** 成员 */\n  MEMBER: 'Member',\n};\nObject.freeze(ConversationMemberRole);\nexport { ConversationMemberRole };\n\nexport default class ConversationMemberInfo {\n  /**\n   * 对话成员属性，保存了成员与某个对话相关的属性，对应 _ConversationMemberInfo 表\n   * @since 4.0.0\n   */\n  constructor({\n    conversation,\n    memberId,\n    role,\n  }) {\n    if (!conversation) throw new Error('conversation requried');\n    if (!memberId) throw new Error('memberId requried');\n    Object.assign(internal(this), {\n      conversation,\n      memberId,\n      role,\n    });\n  }\n\n  /**\n   * 对话 Id\n   * @type {String}\n   * @readonly\n   */\n  get conversationId() { return internal(this).conversation.id; }\n  /**\n   * 成员 Id\n   * @type {String}\n   * @readonly\n   */\n  get memberId() { return internal(this).memberId; }\n  /**\n   * 角色\n   * @type {module:leancloud-realtime.ConversationMemberRole | String}\n   * @readonly\n   */\n  get role() { return internal(this).role; }\n  /**\n   * 是否是管理员\n   * @type {Boolean}\n   * @readonly\n   */\n  get isOwner() { return this.memberId === internal(this).conversation.creator; }\n\n  toJSON() {\n    const {\n      conversationId,\n      memberId,\n      role,\n      isOwner,\n    } = this;\n    return {\n      conversationId,\n      memberId,\n      role,\n      isOwner,\n    };\n  }\n}\n","import d from 'debug';\nimport { tap } from './utils';\n\nconst debug = d('LC:SignatureFactoryRunner');\n\nfunction _validateSignature(signatureResult = {}) {\n  const {\n    signature,\n    timestamp,\n    nonce,\n  } = signatureResult;\n  if (typeof signature !== 'string'\n      || typeof timestamp !== 'number'\n      || typeof nonce !== 'string') {\n    throw new Error('malformed signature');\n  }\n  return {\n    signature,\n    timestamp,\n    nonce,\n  };\n}\n\nexport default (signatureFactory, params) =>\n  Promise.resolve()\n    .then(() => {\n      debug('call signatureFactory with %O', params);\n      return signatureFactory(...params);\n    })\n    .then(\n      tap(signatureResult => debug('sign result %O', signatureResult)),\n      (error) => {\n        // eslint-disable-next-line no-param-reassign\n        error.message = `sign error: ${error.message}`;\n        debug(error);\n        throw error;\n      },\n    )\n    .then(_validateSignature);\n","import isEmpty from 'lodash/isEmpty';\nimport cloneDeep from 'lodash/cloneDeep';\nimport ConversationBase from './conversation-base';\nimport ConversationMemberInfo, { ConversationMemberRole } from '../conversation-member-info';\nimport { decodeDate, getTime, encode, keyRemap, union, difference, internal, setValue, ensureArray } from '../utils';\nimport {\n  GenericCommand,\n  ConvCommand,\n  ConvMemberInfo,\n  JsonObjectMessage,\n  BlacklistCommand,\n  OpType,\n} from '../../proto/message';\nimport runSignatureFactory from '../signature-factory-runner';\nimport { createError } from '../error';\n\n/**\n * 部分失败异常\n * @typedef OperationFailureError\n * @type {Error}\n * @property {string} message 异常信息\n * @property {string[]} clientIds 因为该原因失败的 client id 列表\n * @property {number} [code] 错误码\n * @property {string} [detail] 详细信息\n */\n\n/**\n * 部分成功的结果\n * @typedef PartiallySuccess\n * @type {Object}\n * @property {string[]} successfulClientIds 成功的 client id 列表\n * @property {OperationFailureError[]} failures 失败的异常列表\n */\n\n/**\n * 分页查询结果\n * @typedef PagedResults\n * @type {Object}\n * @property {T[]} results 查询结果\n * @property {string} [next] 存在表示还有更多结果，在下次查询中带上可实现翻页。\n */\n\nconst createPartiallySuccess = ({\n  allowedPids,\n  failedPids,\n}) => ({\n  successfulClientIds: allowedPids,\n  failures: failedPids.map(({\n    pids, ...error\n  }) => Object.assign(createError(error), { clientIds: pids })),\n});\n\n/**\n * @extends ConversationBase\n * @private\n * @abstract\n */\nclass PersistentConversation extends ConversationBase {\n  constructor(data, {\n    creator,\n    createdAt,\n    updatedAt,\n    transient = false,\n    system = false,\n    muted = false,\n    mutedMembers = [],\n    ...attributes\n  }, client) {\n    super({\n      ...data,\n      /**\n       * 对话创建者\n       * @memberof PersistentConversation#\n       * @type {String}\n       */\n      creator,\n      /**\n       * 对话创建时间\n       * @memberof PersistentConversation#\n       * @type {Date}\n       */\n      createdAt,\n      /**\n       * 对话更新时间\n       * @memberof PersistentConversation#\n       * @type {Date}\n       */\n      updatedAt,\n      /**\n       * 对该对话设置了静音的用户列表\n       * @memberof PersistentConversation#\n       * @type {?String[]}\n       */\n      mutedMembers,\n      /**\n       * 暂态对话标记\n       * @memberof PersistentConversation#\n       * @type {Boolean}\n       */\n      transient,\n      /**\n       * 系统对话标记\n       * @memberof PersistentConversation#\n       * @type {Boolean}\n       * @since 3.3.0\n       */\n      system,\n      /**\n       * 当前用户静音该对话标记\n       * @memberof PersistentConversation#\n       * @type {Boolean}\n       */\n      muted,\n      _attributes: attributes,\n    }, client);\n    this._reset();\n  }\n\n  set createdAt(value) {\n    this._createdAt = decodeDate(value);\n  }\n  get createdAt() {\n    return this._createdAt;\n  }\n  set updatedAt(value) {\n    this._updatedAt = decodeDate(value);\n  }\n  get updatedAt() {\n    return this._updatedAt;\n  }\n\n\n  /**\n   * 对话名字，对应 _Conversation 表中的 name\n   * @type {String}\n   */\n  get name() {\n    return this.get('name');\n  }\n  set name(value) {\n    this.set('name', value);\n  }\n\n  /**\n   * 获取对话的自定义属性\n   * @since 3.2.0\n   * @param  {String} key key 属性的键名，'x' 对应 Conversation 表中的 x 列\n   * @return {Any} 属性的值\n   */\n  get(key) {\n    return internal(this).currentAttributes[key];\n  }\n\n  /**\n   * 设置对话的自定义属性\n   * @since 3.2.0\n   * @param {String} key 属性的键名，'x' 对应 Conversation 表中的 x 列，支持使用 'x.y.z' 来修改对象的部分字段。\n   * @param {Any} value 属性的值\n   * @return {this} self\n   * @example\n   *\n   * // 设置对话的 color 属性\n   * conversation.set('color', {\n   *   text: '#000',\n   *   background: '#DDD',\n   * });\n   * // 设置对话的 color.text 属性\n   * conversation.set('color.text', '#333');\n   */\n  set(key, value) {\n    this._debug(`set [${key}]: ${value}`);\n    const { pendingAttributes } = internal(this);\n    const pendingKeys = Object.keys(pendingAttributes);\n    // suppose pendingAttributes = { 'a.b': {} }\n    // set 'a' or 'a.b': delete 'a.b'\n    const re = new RegExp(`^${key}`);\n    const childKeys = pendingKeys.filter(re.test.bind(re));\n    childKeys.forEach((k) => {\n      delete pendingAttributes[k];\n    });\n    if (childKeys.length) {\n      pendingAttributes[key] = value;\n    } else {\n      // set 'a.c': nothing to do\n      // set 'a.b.c.d': assign c: { d: {} } to 'a.b'\n      // CAUTION: non-standard API, provided by core-js\n      const parentKey = Array.find(pendingKeys, k => key.indexOf(k) === 0); // 'a.b'\n      if (parentKey) {\n        setValue(pendingAttributes[parentKey], key.slice(parentKey.length + 1), value);\n      } else {\n        pendingAttributes[key] = value;\n      }\n    }\n    this._buildCurrentAttributes();\n    return this;\n  }\n\n  _buildCurrentAttributes() {\n    const { pendingAttributes } = internal(this);\n    internal(this).currentAttributes = Object.keys(pendingAttributes)\n      .reduce(\n        (target, k) => setValue(target, k, pendingAttributes[k]),\n        cloneDeep(this._attributes),\n      );\n  }\n\n  _updateServerAttributes(attributes) {\n    Object.keys(attributes).forEach(key => setValue(this._attributes, key, attributes[key]));\n    this._buildCurrentAttributes();\n  }\n\n  _reset() {\n    internal(this).pendingAttributes = {};\n    internal(this).currentAttributes = this._attributes;\n  }\n\n  /**\n   * 保存当前对话的属性至服务器\n   * @return {Promise.<this>} self\n   */\n  async save() {\n    this._debug('save');\n    const attr = internal(this).pendingAttributes;\n    if (isEmpty(attr)) {\n      this._debug('nothing touched, resolve with self');\n      return this;\n    }\n    this._debug('attr: %O', attr);\n    const convMessage = new ConvCommand({\n      attr: new JsonObjectMessage({\n        data: JSON.stringify(encode(attr)),\n      }),\n    });\n    const resCommand = await this._send(new GenericCommand({\n      op: 'update',\n      convMessage,\n    }));\n    this.updatedAt = resCommand.convMessage.udate;\n    this._attributes = internal(this).currentAttributes;\n    internal(this).pendingAttributes = {};\n    return this;\n  }\n\n  /**\n   * 从服务器更新对话的属性\n   * @return {Promise.<this>} self\n   */\n  async fetch() {\n    const query = this._client.getQuery().equalTo('objectId', this.id);\n    await query.find();\n    return this;\n  }\n\n  /**\n   * 静音，客户端拒绝收到服务器端的离线推送通知\n   * @return {Promise.<this>} self\n   */\n  async mute() {\n    this._debug('mute');\n    await this._send(new GenericCommand({\n      op: 'mute',\n    }));\n    if (!this.transient) {\n      this.muted = true;\n      this.mutedMembers = union(this.mutedMembers, [this._client.id]);\n    }\n    return this;\n  }\n\n  /**\n   * 取消静音\n   * @return {Promise.<this>} self\n   */\n  async unmute() {\n    this._debug('unmute');\n    await this._send(new GenericCommand({\n      op: 'unmute',\n    }));\n    if (!this.transient) {\n      this.muted = false;\n      this.mutedMembers = difference(this.mutedMembers, [this._client.id]);\n    }\n    return this;\n  }\n\n  async _appendConversationSignature(command, action, clientIds) {\n    if (this._client.options.conversationSignatureFactory) {\n      const params = [this.id, this._client.id, clientIds.sort(), action];\n      const signatureResult = await runSignatureFactory(\n        this._client.options.conversationSignatureFactory,\n        params,\n      );\n      Object.assign(command.convMessage, keyRemap({\n        signature: 's',\n        timestamp: 't',\n        nonce: 'n',\n      }, signatureResult));\n    }\n  }\n\n  async _appendBlacklistSignature(command, action, clientIds) {\n    if (this._client.options.blacklistSignatureFactory) {\n      const params = [this._client.id, this.id, clientIds.sort(), action];\n      const signatureResult = await runSignatureFactory(\n        this._client.options.blacklistSignatureFactory,\n        params,\n      );\n      Object.assign(command.blacklistMessage, keyRemap({\n        signature: 's',\n        timestamp: 't',\n        nonce: 'n',\n      }, signatureResult));\n    }\n  }\n\n  /**\n   * 增加成员\n   * @param {String|String[]} clientIds 新增成员 client id\n   * @return {Promise.<PartiallySuccess>} 部分成功结果，包含了成功的 id 列表、失败原因与对应的 id 列表\n   */\n  async add(clientIds) {\n    this._debug('add', clientIds);\n    if (typeof clientIds === 'string') {\n      clientIds = [clientIds]; // eslint-disable-line no-param-reassign\n    }\n    const command = new GenericCommand({\n      op: 'add',\n      convMessage: new ConvCommand({\n        m: clientIds,\n      }),\n    });\n    await this._appendConversationSignature(command, 'add', clientIds);\n    const {\n      convMessage,\n      convMessage: {\n        allowedPids,\n      },\n    } = await this._send(command);\n    if (!this.transient && !this.system) {\n      this.members = union(this.members, allowedPids);\n    }\n    return createPartiallySuccess(convMessage);\n  }\n\n  /**\n   * 剔除成员\n   * @param {String|String[]} clientIds 成员 client id\n   * @return {Promise.<PartiallySuccess>} 部分成功结果，包含了成功的 id 列表、失败原因与对应的 id 列表\n   */\n  async remove(clientIds) {\n    this._debug('remove', clientIds);\n    if (typeof clientIds === 'string') {\n      clientIds = [clientIds]; // eslint-disable-line no-param-reassign\n    }\n    const command = new GenericCommand({\n      op: 'remove',\n      convMessage: new ConvCommand({\n        m: clientIds,\n      }),\n    });\n    await this._appendConversationSignature(command, 'remove', clientIds);\n    const {\n      convMessage,\n      convMessage: {\n        allowedPids,\n      },\n    } = await this._send(command);\n    if (!this.transient && !this.system) {\n      this.members = difference(this.members, allowedPids);\n    }\n    return createPartiallySuccess(convMessage);\n  }\n\n  /**\n   * （当前用户）加入该对话\n   * @return {Promise.<this>} self\n   */\n  async join() {\n    this._debug('join');\n    return this.add(this._client.id).then(({\n      failures,\n    }) => {\n      if (failures[0]) throw failures[0];\n      return this;\n    });\n  }\n\n  /**\n   * （当前用户）退出该对话\n   * @return {Promise.<this>} self\n   */\n  async quit() {\n    this._debug('quit');\n    return this.remove(this._client.id).then(({\n      failures,\n    }) => {\n      if (failures[0]) throw failures[0];\n      return this;\n    });\n  }\n\n  /**\n   * 在该对话中禁言成员\n   * @param {String|String[]} clientIds 成员 client id\n   * @return {Promise.<PartiallySuccess>} 部分成功结果，包含了成功的 id 列表、失败原因与对应的 id 列表\n   */\n  async muteMembers(clientIds) {\n    this._debug('mute', clientIds);\n    clientIds = ensureArray(clientIds); // eslint-disable-line no-param-reassign\n    const command = new GenericCommand({\n      op: OpType.add_shutup,\n      convMessage: new ConvCommand({\n        m: clientIds,\n      }),\n    });\n    const {\n      convMessage,\n    } = await this._send(command);\n    return createPartiallySuccess(convMessage);\n  }\n\n  /**\n   * 在该对话中解除成员禁言\n   * @param {String|String[]} clientIds 成员 client id\n   * @return {Promise.<PartiallySuccess>} 部分成功结果，包含了成功的 id 列表、失败原因与对应的 id 列表\n   */\n  async unmuteMembers(clientIds) {\n    this._debug('unmute', clientIds);\n    clientIds = ensureArray(clientIds); // eslint-disable-line no-param-reassign\n    const command = new GenericCommand({\n      op: OpType.remove_shutup,\n      convMessage: new ConvCommand({\n        m: clientIds,\n      }),\n    });\n    const {\n      convMessage,\n    } = await this._send(command);\n    return createPartiallySuccess(convMessage);\n  }\n\n  /**\n   * 查询该对话禁言成员列表\n   * @param {Object} [options]\n   * @param {Number} [options.limit] 返回的成员数量，服务器默认值 10\n   * @param {String} [options.next] 从指定 next 开始查询，与 limit 一起使用可以完成翻页。\n   * @return {PagedResults.<string>} 查询结果。其中的 cureser 存在表示还有更多结果。\n   */\n  async queryMutedMembers({\n    limit,\n    next,\n  } = {}) {\n    this._debug('query muted: limit %O, next: %O', limit, next);\n    const command = new GenericCommand({\n      op: OpType.query_shutup,\n      convMessage: new ConvCommand({\n        limit,\n        next,\n      }),\n    });\n    const {\n      convMessage: {\n        m,\n        next: newNext,\n      },\n    } = await this._send(command);\n    return {\n      results: m,\n      next: newNext,\n    };\n  }\n\n  /**\n   * 将用户加入该对话黑名单\n   * @param {String|String[]} clientIds 成员 client id\n   * @return {Promise.<PartiallySuccess>} 部分成功结果，包含了成功的 id 列表、失败原因与对应的 id 列表\n   */\n  async blockMembers(clientIds) {\n    this._debug('block', clientIds);\n    clientIds = ensureArray(clientIds); // eslint-disable-line no-param-reassign\n    const command = new GenericCommand({\n      cmd: 'blacklist',\n      op: OpType.block,\n      blacklistMessage: new BlacklistCommand({\n        srcCid: this.id,\n        toPids: clientIds,\n      }),\n    });\n    await this._appendBlacklistSignature(command, 'conversation-block-clients', clientIds);\n    const {\n      blacklistMessage,\n    } = await this._send(command);\n    return createPartiallySuccess(blacklistMessage);\n  }\n\n  /**\n   * 将用户移出该对话黑名单\n   * @param {String|String[]} clientIds 成员 client id\n   * @return {Promise.<PartiallySuccess>} 部分成功结果，包含了成功的 id 列表、失败原因与对应的 id 列表\n   */\n  async unblockMembers(clientIds) {\n    this._debug('unblock', clientIds);\n    clientIds = ensureArray(clientIds); // eslint-disable-line no-param-reassign\n    const command = new GenericCommand({\n      cmd: 'blacklist',\n      op: OpType.unblock,\n      blacklistMessage: new BlacklistCommand({\n        srcCid: this.id,\n        toPids: clientIds,\n      }),\n    });\n    await this._appendBlacklistSignature(command, 'conversation-unblock-clients', clientIds);\n    const {\n      blacklistMessage,\n    } = await this._send(command);\n    return createPartiallySuccess(blacklistMessage);\n  }\n\n  /**\n   * 查询该对话黑名单\n   * @param {Object} [options]\n   * @param {Number} [options.limit] 返回的成员数量，服务器默认值 10\n   * @param {String} [options.next] 从指定 next 开始查询，与 limit 一起使用可以完成翻页\n   * @return {PagedResults.<string>} 查询结果。其中的 cureser 存在表示还有更多结果。\n   */\n  async queryBlockedMembers({\n    limit,\n    next,\n  } = {}) {\n    this._debug('query blocked: limit %O, next: %O', limit, next);\n    const command = new GenericCommand({\n      cmd: 'blacklist',\n      op: OpType.query,\n      blacklistMessage: new BlacklistCommand({\n        srcCid: this.id,\n        limit,\n        next,\n      }),\n    });\n    const {\n      blacklistMessage: {\n        blockedPids,\n        next: newNext,\n      },\n    } = await this._send(command);\n    return {\n      results: blockedPids,\n      next: newNext,\n    };\n  }\n\n  /**\n   * 获取所有成员的对话属性\n   * @since 4.0.0\n   * @return {Promise.<ConversationMemberInfo[]>} 所有成员的对话属性列表\n   */\n  async getAllMemberInfo() {\n    const response = await this._client._requestWithSessionToken({\n      method: 'GET',\n      path: '/classes/_ConversationMemberInfo',\n      query: {\n        where: { cid: this.id },\n      },\n    });\n    const memberInfos = response.results.map(info => new ConversationMemberInfo({\n      conversation: this,\n      memberId: info.clientId,\n      role: info.role,\n    }));\n    const memberInfoMap = {};\n    memberInfos.forEach((memberInfo) => {\n      memberInfoMap[memberInfo.memberId] = memberInfo;\n    });\n    this.members.forEach((memberId) => {\n      memberInfoMap[memberId] = new ConversationMemberInfo({\n        conversation: this,\n        memberId,\n        role: ConversationMemberRole.MEMBER,\n      });\n    });\n    internal(this).memberInfoMap = memberInfoMap;\n    return this.members.map(memberId => memberInfoMap[memberId]);\n  }\n\n  /**\n   * 获取指定成员的对话属性\n   * @since 4.0.0\n   * @return {Promise.<ConversationMemberInfo>} 指定成员的对话属性\n   */\n  async getMemberInfo(memberId) {\n    if (this.members.indexOf(memberId) === -1) throw new Error(`${memberId} is not the mumber of conversation[${this.id}]`);\n    const { memberInfoMap } = internal(this);\n    if (!(memberInfoMap && memberInfoMap[memberId])) await this.getAllMemberInfo();\n    return internal(this).memberInfoMap[memberId];\n  }\n\n  /**\n   * 更新指定用户的角色\n   * @since 4.0.0\n   * @param {String} memberId 成员 Id\n   * @param {module:leancloud-realtime.ConversationMemberRole | String} role 角色\n   * @return {Promise.<this>} self\n   */\n  async updateMemberRole(memberId, role) {\n    this._debug('mute');\n    await this._send(new GenericCommand({\n      op: OpType.member_info_update,\n      convMessage: new ConvCommand({\n        targetClientId: memberId,\n        info: new ConvMemberInfo({\n          pid: memberId,\n          role,\n        }),\n      }),\n    }));\n    const { memberInfos } = internal(this);\n    if (memberInfos && memberInfos[memberId]) {\n      internal(memberInfos[memberId]).role = role;\n    }\n    return this;\n  }\n\n  toFullJSON() {\n    const {\n      creator, system, transient,\n      createdAt, updatedAt,\n      _attributes,\n    } = this;\n    return {\n      ...super.toFullJSON(),\n      creator,\n      system,\n      transient,\n      createdAt: getTime(createdAt),\n      updatedAt: getTime(updatedAt),\n      ..._attributes,\n    };\n  }\n\n  toJSON() {\n    const {\n      creator, system, transient, muted, mutedMembers,\n      createdAt, updatedAt,\n      _attributes,\n    } = this;\n    return {\n      ...super.toJSON(),\n      creator,\n      system,\n      transient,\n      muted,\n      mutedMembers,\n      createdAt,\n      updatedAt,\n      ..._attributes,\n    };\n  }\n}\n\nexport default PersistentConversation;\n","import PersistentConversation from './persistent-conversation';\n\n/**\n * 普通对话\n *\n * 无法直接实例化，请使用 {@link IMClient#createConversation} 创建新的普通对话。\n * @extends PersistentConversation\n * @public\n */\nclass Conversation extends PersistentConversation {}\n\nexport default Conversation;\n","import PersistentConversation from './persistent-conversation';\n\n/**\n * 聊天室。\n *\n * 无法直接实例化，请使用 {@link IMClient#createChatRoom} 创建新的聊天室。\n * @since 4.0.0\n * @extends PersistentConversation\n * @public\n */\nclass ChatRoom extends PersistentConversation {}\n\nexport default ChatRoom;\n","import PersistentConversation from './persistent-conversation';\n\n/**\n * 服务号。\n *\n * 服务号不支持在客户端创建。\n * @since 4.0.0\n * @extends PersistentConversation\n * @public\n */\nclass ServiceConversation extends PersistentConversation {\n  /**\n   * 订阅该服务号\n   * @return {Promise.<this>} self\n   */\n  async subscribe() {\n    return this.join();\n  }\n\n  /**\n   * 退订该服务号\n   * @return {Promise.<this>} self\n   */\n  async unsubscribe() {\n    return this.quit();\n  }\n}\n\nexport default ServiceConversation;\n","import ConversationBase from './conversation-base';\nimport { createError, ErrorCode } from '../error';\nimport { decodeDate, getTime } from '../utils';\n\nconst transformNotFoundError = error => (\n  error.code === ErrorCode.CONVERSATION_NOT_FOUND\n    ? createError({ code: ErrorCode.CONVERSATION_EXPIRED })\n    : error\n);\n\n/**\n * 临时对话\n * @since 4.0.0\n * @extends ConversationBase\n * @public\n */\nclass TemporaryConversation extends ConversationBase {\n  /**\n   * 无法直接实例化，请使用 {@link IMClient#createTemporaryConversation} 创建新的临时对话。\n   */\n  constructor(data, {\n    expiredAt,\n  }, client) {\n    super({\n      ...data,\n      expiredAt,\n    }, client);\n  }\n\n  /**\n   * 对话失效时间\n   * @type {Date}\n   */\n  set expiredAt(value) {\n    this._expiredAt = decodeDate(value);\n  }\n  get expiredAt() {\n    return this._expiredAt;\n  }\n\n  /**\n   * 对话是否已失效\n   * @type {Boolean}\n   */\n  get expired() {\n    return this.expiredAt < new Date();\n  }\n\n  async _send(...args) {\n    if (this.expired) throw createError({ code: ErrorCode.CONVERSATION_EXPIRED });\n    try {\n      return await super._send(...args);\n    } catch (error) {\n      throw transformNotFoundError(error);\n    }\n  }\n\n  async send(...args) {\n    try {\n      return await super.send(...args);\n    } catch (error) {\n      throw transformNotFoundError(error);\n    }\n  }\n\n  toFullJSON() {\n    const {\n      expiredAt,\n    } = this;\n    return {\n      ...super.toFullJSON(),\n      expiredAt: getTime(expiredAt),\n    };\n  }\n\n  toJSON() {\n    const {\n      expiredAt,\n      expired,\n    } = this;\n    return {\n      ...super.toJSON(),\n      expiredAt,\n      expired,\n    };\n  }\n}\n\nexport default TemporaryConversation;\n","import d from 'debug';\n\nconst debug = d('LC:ConversationQuery');\n\nexport default class ConversationQuery {\n  static _encode(value) {\n    if (value instanceof Date) {\n      return { __type: 'Date', iso: value.toJSON() };\n    }\n    if (value instanceof RegExp) {\n      return value.source;\n    }\n    return value;\n  }\n\n  static _quote(s) {\n    return `\\\\Q${s.replace('\\\\E', '\\\\E\\\\\\\\E\\\\Q')}\\\\E`;\n  }\n\n  static _calculateFlag(options) {\n    return [\n      'withLastMessagesRefreshed',\n      'compact',\n    ].reduce(\n      // eslint-disable-next-line no-bitwise\n      (prev, key) => (prev << 1) + (Boolean)(options[key]),\n      0,\n    );\n  }\n\n  /**\n   * Create a ConversationQuery\n   * @param  {IMClient} client\n   */\n  constructor(client) {\n    this._client = client;\n    this._where = {};\n    this._extraOptions = {};\n  }\n\n  _addCondition(key, condition, value) {\n    // Check if we already have a condition\n    if (!this._where[key]) {\n      this._where[key] = {};\n    }\n    this._where[key][condition] = this.constructor._encode(value);\n    return this;\n  }\n\n  toJSON() {\n    const json = {\n      where: this._where,\n      flag: this.constructor._calculateFlag(this._extraOptions),\n    };\n    if (typeof this._skip !== 'undefined') json.skip = this._skip;\n    if (typeof this._limit !== 'undefined') json.limit = this._limit;\n    if (typeof this._order !== 'undefined') json.sort = this._order;\n    debug(json);\n    return json;\n  }\n\n  /**\n   * 增加查询条件，指定聊天室的组员包含某些成员即可返回\n   * @param {string[]} peerIds - 成员 ID 列表\n   * @return {ConversationQuery} self\n   */\n  containsMembers(peerIds) {\n    return this.containsAll('m', peerIds);\n  }\n\n  /**\n   * 增加查询条件，指定聊天室的组员条件满足条件的才返回\n   *\n   * @param {string[]} - 成员 ID 列表\n   * @param {Boolean} includeSelf - 是否包含自己\n   * @return {ConversationQuery} self\n   */\n  withMembers(peerIds, includeSelf) {\n    const peerIdsSet = new Set(peerIds);\n    if (includeSelf) {\n      peerIdsSet.add(this._client.id);\n    }\n    this.sizeEqualTo('m', peerIdsSet.size);\n    return this.containsMembers(Array.from(peerIdsSet));\n  }\n\n  /**\n   * 增加查询条件，当 conversation 的属性中对应的字段满足等于条件时即可返回\n   *\n   * @param {string} key\n   * @param value\n   * @return {ConversationQuery} self\n   */\n  equalTo(key, value) {\n    this._where[key] = this.constructor._encode(value);\n    return this;\n  }\n\n  /**\n   * 增加查询条件，当 conversation 的属性中对应的字段满足小于条件时即可返回\n   * @param {string} key\n   * @param value\n   * @return {ConversationQuery} self\n   */\n  lessThan(key, value) {\n    return this._addCondition(key, '$lt', value);\n  }\n\n\n  /**\n   * 增加查询条件，当 conversation 的属性中对应的字段满足小于等于条件时即可返回\n\n   * @param {string} key\n   * @param value\n   * @return {ConversationQuery} self\n   */\n  lessThanOrEqualTo(key, value) {\n    return this._addCondition(key, '$lte', value);\n  }\n\n  /**\n   * 增加查询条件，当 conversation 的属性中对应的字段满足大于条件时即可返回\n   *\n   * @param {string} key\n   * @param value\n   * @return {ConversationQuery} self\n   */\n\n  greaterThan(key, value) {\n    return this._addCondition(key, '$gt', value);\n  }\n\n  /**\n   * 增加查询条件，当 conversation 的属性中对应的字段满足大于等于条件时即可返回\n   *\n   * @param {string} key\n   * @param value\n   * @return {ConversationQuery} self\n   */\n\n  greaterThanOrEqualTo(key, value) {\n    return this._addCondition(key, '$gte', value);\n  }\n\n  /**\n   * 增加查询条件，当 conversation 的属性中对应的字段满足不等于条件时即可返回\n   *\n   * @param {string} key\n   * @param value\n   * @return {ConversationQuery} self\n   */\n  notEqualTo(key, value) {\n    return this._addCondition(key, '$ne', value);\n  }\n\n  /**\n   * 增加查询条件，当 conversation 存在指定的字段时即可返回\n   *\n   * @since 3.5.0\n   * @param {string} key\n   * @return {ConversationQuery} self\n   */\n  exists(key) {\n    return this._addCondition(key, '$exists', true);\n  }\n\n  /**\n   * 增加查询条件，当 conversation 不存在指定的字段时即可返回\n   *\n   * @since 3.5.0\n   * @param {string} key\n   * @return {ConversationQuery} self\n   */\n  doesNotExist(key) {\n    return this._addCondition(key, '$exists', false);\n  }\n\n  /**\n   * 增加查询条件，当 conversation 的属性中对应的字段对应的值包含在指定值中时即可返回\n   *\n   * @param {string} key\n   * @param values\n   * @return {ConversationQuery} self\n   */\n  containedIn(key, values) {\n    return this._addCondition(key, '$in', values);\n  }\n\n  /**\n   * 增加查询条件，当 conversation 的属性中对应的字段对应的值不包含在指定值中时即可返回\n   *\n   * @param {string} key\n   * @param values\n   * @return {ConversationQuery} self\n   */\n  notContainsIn(key, values) {\n    return this._addCondition(key, '$nin', values);\n  }\n  /**\n   * 增加查询条件，当conversation的属性中对应的字段中的元素包含所有的值才可返回\n   *\n   * @param {string} key\n   * @param values\n   * @return {ConversationQuery} self\n   */\n  containsAll(key, values) {\n    return this._addCondition(key, '$all', values);\n  }\n\n  /**\n   * 增加查询条件，当 conversation 的属性中对应的字段对应的值包含此字符串即可返回\n   *\n   * @param {string} key\n   * @param {string} subString\n   * @return {ConversationQuery} self\n   */\n  contains(key, subString) {\n    return this._addCondition(key, '$regex', ConversationQuery._quote(subString));\n  }\n\n  /**\n   * 增加查询条件，当 conversation 的属性中对应的字段对应的值以此字符串起始即可返回\n   *\n   * @param {string} key\n   * @param {string} prefix\n   * @return {ConversationQuery} self\n   */\n  startsWith(key, prefix) {\n    return this._addCondition(key, '$regex', `^${ConversationQuery._quote(prefix)}`);\n  }\n\n  /**\n   * 增加查询条件，当 conversation 的属性中对应的字段对应的值以此字符串结束即可返回\n   *\n   * @param {string} key\n   * @param {string} suffix\n   * @return {ConversationQuery} self\n   */\n  endsWith(key, suffix) {\n    return this._addCondition(key, '$regex', `${ConversationQuery._quote(suffix)}$`);\n  }\n\n  /**\n   * 增加查询条件，当 conversation 的属性中对应的字段对应的值满足提供的正则表达式即可返回\n   *\n   * @param {string} key\n   * @param {RegExp} regex\n   * @return {ConversationQuery} self\n   */\n  matches(key, regex) {\n    this._addCondition(key, '$regex', regex);\n    // Javascript regex options support mig as inline options but store them\n    // as properties of the object. We support mi & should migrate them to\n    // modifiers\n    let _modifiers = '';\n    if (regex.ignoreCase) { _modifiers += 'i'; }\n    if (regex.multiline) { _modifiers += 'm'; }\n\n    if (_modifiers && _modifiers.length) {\n      this._addCondition(key, '$options', _modifiers);\n    }\n    return this;\n  }\n\n  /**\n   * 添加查询约束条件，查找 key 类型是数组，该数组的长度匹配提供的数值\n   *\n   * @param {string} key\n   * @param {Number} length\n   * @return {ConversationQuery} self\n   */\n  sizeEqualTo(key, length) {\n    return this._addCondition(key, '$size', length);\n  }\n\n  /**\n   * 设置返回集合的大小上限\n   *\n   * @param {Number} limit - 上限\n   * @return {ConversationQuery} self\n   */\n  limit(limit) {\n    this._limit = limit;\n    return this;\n  }\n\n  /**\n   * 设置返回集合的起始位置，一般用于分页\n   *\n   * @param {Number} skip - 起始位置跳过几个对象\n   * @return {ConversationQuery} self\n   */\n  skip(skip) {\n    this._skip = skip;\n    return this;\n  }\n\n  /**\n   * 设置返回集合按照指定key进行增序排列\n   *\n   * @param {string} key\n   * @return {ConversationQuery} self\n   */\n  ascending(key) {\n    this._order = key;\n    return this;\n  }\n\n  /**\n   * 设置返回集合按照指定key进行增序排列，如果已设置其他排序，原排序的优先级较高\n   *\n   * @param {string} key\n   * @return {ConversationQuery} self\n   */\n  addAscending(key) {\n    if (this._order) {\n      this._order += `,${key}`;\n    } else {\n      this._order = key;\n    }\n    return this;\n  }\n\n  /**\n   * 设置返回集合按照指定 key 进行降序排列\n   *\n   * @param {string} key\n   * @return {ConversationQuery} self\n   */\n  descending(key) {\n    this._order = `-${key}`;\n    return this;\n  }\n\n  /**\n   * 设置返回集合按照指定 key 进行降序排列，如果已设置其他排序，原排序的优先级较高\n   *\n   * @param {string} key\n   * @return {ConversationQuery} self\n   */\n  addDescending(key) {\n    if (this._order) {\n      this._order += `,-${key}`;\n    } else {\n      this._order = `-${key}`;\n    }\n    return this;\n  }\n\n  /**\n   * 设置返回的 conversations 刷新最后一条消息\n   * @param  {Boolean} [enabled=true]\n   * @return {ConversationQuery} self\n   */\n  withLastMessagesRefreshed(enabled = true) {\n    this._extraOptions.withLastMessagesRefreshed = enabled;\n    return this;\n  }\n\n  /**\n   * 设置返回的 conversations 为精简模式，即不含成员列表\n   * @param  {Boolean} [enabled=true]\n   * @return {ConversationQuery} self\n   */\n  compact(enabled = true) {\n    this._extraOptions.compact = enabled;\n    return this;\n  }\n\n  /**\n   * 执行查询\n   * @return {Promise.<ConversationBase[]>}\n   */\n  async find() {\n    return this._client._executeQuery(this);\n  }\n}\n","import d from 'debug';\nimport { Expirable } from './utils';\n\nconst debug = d('LC:SessionManager');\n\nexport default class SessionManager {\n  constructor({\n    refresh,\n    onBeforeGetSessionToken,\n  } = {}) {\n    this.refresh = refresh;\n    this._onBeforeGetSessionToken = onBeforeGetSessionToken;\n    this.setSessionToken(null, 0);\n  }\n\n  setSessionToken(token, ttl) {\n    debug('set session token', token, ttl);\n    const sessionToken = new Expirable(token, ttl * 1000);\n    this._sessionToken = sessionToken;\n    delete this._pendingSessionTokenPromise;\n    return sessionToken;\n  }\n\n  async setSessionTokenAsync(promise) {\n    const currentSessionToken = this._sessionToken;\n    this._pendingSessionTokenPromise = promise.catch((error) => {\n      // revert, otherwise the following getSessionToken calls\n      // will all be rejected\n      this._sessionToken = currentSessionToken;\n      throw error;\n    });\n    return this.setSessionToken(...await this._pendingSessionTokenPromise);\n  }\n\n  async getSessionToken({ autoRefresh = true } = {}) {\n    debug('get session token');\n    if (this._onBeforeGetSessionToken) {\n      this._onBeforeGetSessionToken(this);\n    }\n    const { value, originalValue } = this._sessionToken || await this._pendingSessionTokenPromise;\n    if (value === Expirable.EXPIRED && autoRefresh && this.refresh) {\n      debug('refresh expired session token');\n      const { value: newValue } =\n        await this.setSessionTokenAsync(this.refresh(this, originalValue));\n      debug('session token', newValue);\n      return newValue;\n    }\n    debug('session token', value);\n    return value;\n  }\n\n  revoke() {\n    if (this._sessionToken) this._sessionToken.expiredAt = -1;\n  }\n}\n","import EventEmitter from 'eventemitter3';\nimport { decode as decodeBase64 } from 'base64-arraybuffer';\nimport remove from 'lodash/remove';\nimport d from 'debug';\nimport {\n  Conversation,\n  ChatRoom,\n  ServiceConversation,\n  TemporaryConversation,\n} from './conversations';\nimport ConversationBase from './conversations/conversation-base';\nimport ConversationQuery from './conversation-query';\nimport {\n  GenericCommand,\n  SessionCommand,\n  ConvCommand,\n  AckCommand,\n  JsonObjectMessage,\n  ReadCommand,\n  ReadTuple,\n  CommandType,\n  OpType,\n} from '../proto/message';\nimport { ErrorCode, createError } from './error';\nimport { Expirable, Cache, keyRemap, union, difference, trim, internal, throttle, encode, decode } from './utils';\nimport { applyDecorators, applyDispatcher } from './plugin';\nimport SessionManager from './session-manager';\nimport runSignatureFactory from './signature-factory-runner';\nimport { MessageStatus } from './messages/message';\nimport { version as VERSION } from '../package.json';\n\nconst debug = d('LC:IMClient');\n\nconst isTemporaryConversatrionId = id => /^_tmp:/.test(id);\n\n/**\n * 1 patch-msg\n * 1 temp-conv-msg\n * 0 auto-bind-deviceid-and-installation\n * 1 transient-msg-ack\n * 0 keep-notification\n * 1 partial-failed-msg\n * @ignore\n */\nconst configBitmap = 0B101011;\n\nexport default class IMClient extends EventEmitter {\n  /**\n   * 无法直接实例化，请使用 {@link Realtime#createIMClient} 创建新的 IMClient。\n   *\n   * @extends EventEmitter\n   */\n  constructor(id, options = {}, props) {\n    if (!(id === undefined || typeof id === 'string')) {\n      throw new TypeError(`Client id [${id}] is not a String`);\n    }\n    super();\n    Object.assign(this, {\n      /**\n       * @var id {String} 客户端 id\n       * @memberof IMClient#\n       */\n      id,\n      options,\n    }, props);\n\n    if (!this._messageParser) {\n      throw new Error('IMClient must be initialized with a MessageParser');\n    }\n    this._conversationCache = new Cache(`client:${this.id}`);\n    this._ackMessageBuffer = {};\n    internal(this).lastPatchTime = Date.now();\n    internal(this)._eventemitter = new EventEmitter();\n    [\n      'invited',\n      'kicked',\n      'membersjoined',\n      'membersleft',\n      'memberinfoupdated',\n      'blocked',\n      'unblocked',\n      'membersblocked',\n      'membersunblocked',\n      'muted',\n      'unmuted',\n      'membersmuted',\n      'membersunmuted',\n      'message',\n      'unreadmessagescountupdate',\n      'close',\n      'conflict',\n      'unhandledmessage',\n      'reconnect',\n      'reconnecterror',\n      'conversationinfoupdated',\n    ].forEach(event => this.on(\n      event,\n      (...payload) => this._debug(`${event} event emitted. %O`, payload),\n    ));\n    // onIMClientCreate hook\n    applyDecorators(this._plugins.onIMClientCreate, this);\n  }\n\n  _debug(...params) {\n    debug(...params, `[${this.id}]`);\n  }\n\n  /**\n   * @override\n   * @private\n   */\n  async _dispatchCommand(command) {\n    this._debug(trim(command), 'received');\n    switch (command.cmd) {\n      case CommandType.conv:\n        return this._dispatchConvMessage(command);\n      case CommandType.direct:\n        return this._dispatchDirectMessage(command);\n      case CommandType.session:\n        return this._dispatchSessionMessage(command);\n      case CommandType.unread:\n        return this._dispatchUnreadMessage(command);\n      case CommandType.rcp:\n        return this._dispatchRcpMessage(command);\n      case CommandType.patch:\n        return this._dispatchPatchMessage(command);\n      default:\n        return this.emit('unhandledmessage', command);\n    }\n  }\n\n  async _dispatchSessionMessage(message) {\n    const {\n      sessionMessage: {\n        code, reason,\n      },\n    } = message;\n    switch (message.op) {\n      case OpType.closed: {\n        internal(this)._eventemitter.emit('close');\n        if (code === ErrorCode.SESSION_CONFLICT) {\n          /**\n           * 用户在其他客户端登录，当前客户端被服务端强行下线。详见文档「单点登录」章节。\n           * @event IMClient#conflict\n           */\n          return this.emit('conflict', {\n            reason,\n          });\n        }\n        /**\n         * 当前客户端被服务端强行下线\n         * @event IMClient#close\n         * @param {Object} payload\n         * @param {Number} payload.code 错误码\n         * @param {String} payload.reason 原因\n         */\n        return this.emit('close', {\n          code, reason,\n        });\n      }\n      default:\n        this.emit('unhandledmessage', message);\n        throw new Error('Unrecognized session command');\n    }\n  }\n\n  _dispatchUnreadMessage({\n    unreadMessage: {\n      convs,\n      notifTime,\n    },\n  }) {\n    internal(this).lastUnreadNotifTime = notifTime;\n    // ensure all converstions are cached\n    return this.getConversations(convs.map(conv => conv.cid)).then(() =>\n      // update conversations data\n      Promise.all(convs.map(({\n        cid,\n        unread,\n        mid,\n        timestamp: ts,\n        from,\n        data,\n        binaryMsg,\n        patchTimestamp,\n        mentioned,\n      }) => {\n        const conversation = this._conversationCache.get(cid);\n        // deleted conversation\n        if (!conversation) return null;\n        let timestamp;\n        if (ts) {\n          timestamp = new Date(ts.toNumber());\n          conversation.lastMessageAt = timestamp; // eslint-disable-line no-param-reassign\n        }\n        return (mid ? this._messageParser.parse(binaryMsg || data).then((message) => {\n          const messageProps = {\n            id: mid,\n            cid,\n            timestamp,\n            updatedAt: patchTimestamp,\n            from,\n          };\n          Object.assign(message, messageProps);\n          conversation.lastMessage = message; // eslint-disable-line no-param-reassign\n        }) : Promise.resolve()).then(() => {\n          conversation._setUnreadMessagesMentioned(mentioned);\n          const countNotUpdated = unread === internal(conversation).unreadMessagesCount;\n          if (countNotUpdated) return null; // to be filtered\n          // manipulate internal property directly to skip unreadmessagescountupdate event\n          internal(conversation).unreadMessagesCount = unread;\n          return conversation;\n        });\n      // filter conversations without unread count update\n      })).then(conversations => conversations.filter(conversation => conversation)))\n      .then((conversations) => {\n        if (conversations.length) {\n          /**\n           * 未读消息数目更新\n           * @event IMClient#unreadmessagescountupdate\n           * @since 3.4.0\n           * @param {Conversation[]} conversations 未读消息数目有更新的对话列表\n           */\n          this.emit('unreadmessagescountupdate', conversations);\n        }\n      });\n  }\n\n  async _dispatchRcpMessage(message) {\n    const {\n      rcpMessage,\n      rcpMessage: {\n        read,\n      },\n    } = message;\n    const conversationId = rcpMessage.cid;\n    const messageId = rcpMessage.id;\n    const timestamp = new Date(rcpMessage.t.toNumber());\n    const conversation = this._conversationCache.get(conversationId);\n    // conversation not cached means the client does not send the message\n    // during this session\n    if (!conversation) return;\n    conversation._handleReceipt({ messageId, timestamp, read });\n  }\n\n  _dispatchPatchMessage({\n    patchMessage: {\n      patches,\n    },\n  }) {\n    // ensure all converstions are cached\n    return this.getConversations(patches.map(patch => patch.cid)).then(() =>\n      Promise.all(patches.map(({\n        cid, mid, timestamp, recall, data, patchTimestamp, from, binaryMsg, mentionAll, mentionPids,\n      }) => {\n        const conversation = this._conversationCache.get(cid);\n        // deleted conversation\n        if (!conversation) return null;\n        return this._messageParser.parse(binaryMsg || data).then((message) => {\n          const patchTime = patchTimestamp.toNumber();\n          const messageProps = {\n            id: mid,\n            cid,\n            timestamp,\n            updatedAt: patchTime,\n            from,\n            mentionList: mentionPids,\n            mentionedAll: mentionAll,\n          };\n          Object.assign(message, messageProps);\n          message._setStatus(MessageStatus.SENT);\n          message._updateMentioned(this.id);\n          if (internal(this).lastPatchTime < patchTime) {\n            internal(this).lastPatchTime = patchTime;\n          }\n          // update conversation lastMessage\n          if (conversation.lastMessage && conversation.lastMessage.id === mid) {\n            conversation.lastMessage = message; // eslint-disable-line no-param-reassign\n          }\n          if (recall) {\n            /**\n             * 消息被撤回\n             * @event IMClient#messagerecall\n             * @param {AVMessage} message 被撤回的消息\n             * @param {ConversationBase} conversation 消息所在的会话\n             */\n            this.emit('messagerecall', message, conversation);\n            /**\n             * 消息被撤回\n             * @event Conversation#messagerecall\n             * @param {AVMessage} message 被撤回的消息\n             */\n            conversation.emit('messagerecall', message);\n          } else {\n            /**\n             * 消息被修改\n             * @event IMClient#messageupdate\n             * @param {AVMessage} message 被修改的消息\n             * @param {ConversationBase} conversation 消息所在的会话\n             */\n            this.emit('messageupdate', message, conversation);\n            /**\n             * 消息被修改\n             * @event Conversation#messageupdate\n             * @param {AVMessage} message 被修改的消息\n             */\n            conversation.emit('messageupdate', message);\n          }\n        });\n      })));\n  }\n\n  async _dispatchConvMessage(message) {\n    const {\n      convMessage,\n      convMessage: {\n        initBy, m, info, attr,\n      },\n    } = message;\n    const conversation = await this.getConversation(convMessage.cid);\n    switch (message.op) {\n      case OpType.joined: {\n        if (!conversation.transient) {\n          // eslint-disable-next-line no-param-reassign\n          conversation.members = union(conversation.members, [this.id]);\n        }\n        const payload = {\n          invitedBy: initBy,\n        };\n        /**\n         * 当前用户被添加至某个对话\n         * @event IMClient#invited\n         * @param {Object} payload\n         * @param {String} payload.invitedBy 邀请者 id\n         * @param {ConversationBase} conversation\n         */\n        this.emit('invited', payload, conversation);\n        /**\n         * 当前用户被添加至当前对话\n         * @event Conversation#invited\n         * @param {Object} payload\n         * @param {String} payload.invitedBy 该移除操作的发起者 id\n         */\n        conversation.emit('invited', payload);\n        return;\n      }\n      case OpType.left: {\n        if (!conversation.transient) {\n          // eslint-disable-next-line no-param-reassign\n          conversation.members = difference(conversation.members, [this.id]);\n        }\n        const payload = {\n          kickedBy: initBy,\n        };\n        /**\n         * 当前用户被从某个对话中移除\n         * @event IMClient#kicked\n         * @param {Object} payload\n         * @param {String} payload.kickedBy 该移除操作的发起者 id\n         * @param {ConversationBase} conversation\n         */\n        this.emit('kicked', payload, conversation);\n        /**\n         * 当前用户被从当前对话中移除\n         * @event Conversation#kicked\n         * @param {Object} payload\n         * @param {String} payload.kickedBy 该移除操作的发起者 id\n         */\n        conversation.emit('kicked', payload);\n        return;\n      }\n      case OpType.members_joined: {\n        if (!conversation.transient) {\n          // eslint-disable-next-line no-param-reassign\n          conversation.members = union(conversation.members, convMessage.m);\n        }\n        const payload = {\n          invitedBy: initBy,\n          members: m,\n        };\n        /**\n         * 有用户被添加至某个对话\n         * @event IMClient#membersjoined\n         * @param {Object} payload\n         * @param {String[]} payload.members 被添加的用户 id 列表\n         * @param {String} payload.invitedBy 邀请者 id\n         * @param {ConversationBase} conversation\n         */\n        this.emit('membersjoined', payload, conversation);\n        /**\n         * 有成员被添加至当前对话\n         * @event Conversation#membersjoined\n         * @param {Object} payload\n         * @param {String[]} payload.members 被添加的成员 id 列表\n         * @param {String} payload.invitedBy 邀请者 id\n         */\n        conversation.emit('membersjoined', payload);\n        return;\n      }\n      case OpType.members_left: {\n        if (!conversation.transient) {\n          // eslint-disable-next-line no-param-reassign\n          conversation.members = difference(conversation.members, convMessage.m);\n        }\n        const payload = {\n          kickedBy: initBy,\n          members: m,\n        };\n        /**\n         * 有成员被从某个对话中移除\n         * @event IMClient#membersleft\n         * @param {Object} payload\n         * @param {String[]} payload.members 被移除的成员 id 列表\n         * @param {String} payload.kickedBy 该移除操作的发起者 id\n         * @param {ConversationBase} conversation\n         */\n        this.emit('membersleft', payload, conversation);\n        /**\n         * 有成员被从当前对话中移除\n         * @event Conversation#membersleft\n         * @param {Object} payload\n         * @param {String[]} payload.members 被移除的成员 id 列表\n         * @param {String} payload.kickedBy 该移除操作的发起者 id\n         */\n        conversation.emit('membersleft', payload);\n        return;\n      }\n      case OpType.members_blocked: {\n        const payload = {\n          blockedBy: initBy,\n          members: m,\n        };\n        /**\n         * 有成员被加入某个对话的黑名单\n         * @event IMClient#membersblocked\n         * @param {Object} payload\n         * @param {String[]} payload.members 成员 id 列表\n         * @param {String} payload.blockedBy 该操作的发起者 id\n         * @param {ConversationBase} conversation\n         */\n        this.emit('membersblocked', payload, conversation);\n        /**\n         * 有成员被加入当前对话的黑名单\n         * @event Conversation#membersblocked\n         * @param {Object} payload\n         * @param {String[]} payload.members 成员 id 列表\n         * @param {String} payload.blockedBy 该操作的发起者 id\n         */\n        conversation.emit('membersblocked', payload);\n        return;\n      }\n      case OpType.members_unblocked: {\n        const payload = {\n          unblockedBy: initBy,\n          members: m,\n        };\n        /**\n         * 有成员被移出某个对话的黑名单\n         * @event IMClient#membersunblocked\n         * @param {Object} payload\n         * @param {String[]} payload.members 成员 id 列表\n         * @param {String} payload.unblockedBy 该操作的发起者 id\n         * @param {ConversationBase} conversation\n         */\n        this.emit('membersunblocked', payload, conversation);\n        /**\n         * 有成员被移出当前对话的黑名单\n         * @event Conversation#membersunblocked\n         * @param {Object} payload\n         * @param {String[]} payload.members 成员 id 列表\n         * @param {String} payload.unblockedBy 该操作的发起者 id\n         */\n        conversation.emit('membersunblocked', payload);\n        return;\n      }\n      case OpType.blocked: {\n        const payload = {\n          blockedBy: initBy,\n        };\n        /**\n         * 当前用户被加入某个对话的黑名单\n         * @event IMClient#blocked\n         * @param {Object} payload\n         * @param {String} payloadblockedBy 该操作的发起者 id\n         * @param {ConversationBase} conversation\n         */\n        this.emit('blocked', payload, conversation);\n        /**\n         * 当前用户被加入当前对话的黑名单\n         * @event Conversation#blocked\n         * @param {Object} payload\n         * @param {String} payload.blockedBy 该操作的发起者 id\n         */\n        conversation.emit('blocked', payload);\n        return;\n      }\n      case OpType.unblocked: {\n        const payload = {\n          unblockedBy: initBy,\n        };\n        /**\n         * 当前用户被移出某个对话的黑名单\n         * @event IMClient#unblocked\n         * @param {Object} payload\n         * @param {String} payload.unblockedBy 该操作的发起者 id\n         * @param {ConversationBase} conversation\n         */\n        this.emit('unblocked', payload, conversation);\n        /**\n         * 当前用户被移出当前对话的黑名单\n         * @event Conversation#unblocked\n         * @param {Object} payload\n         * @param {String} payload.unblockedBy 该操作的发起者 id\n         */\n        conversation.emit('unblocked', payload);\n        return;\n      }\n      case OpType.members_shutuped: {\n        const payload = {\n          mutedBy: initBy,\n          members: m,\n        };\n        /**\n         * 有成员在某个对话中被禁言\n         * @event IMClient#membersmuted\n         * @param {Object} payload\n         * @param {String[]} payload.members 成员 id 列表\n         * @param {String} payload.mutedBy 该操作的发起者 id\n         * @param {ConversationBase} conversation\n         */\n        this.emit('membersmuted', payload, conversation);\n        /**\n         * 有成员在当前对话中被禁言\n         * @event Conversation#membersmuted\n         * @param {Object} payload\n         * @param {String[]} payload.members 成员 id 列表\n         * @param {String} payload.mutedBy 该操作的发起者 id\n         */\n        conversation.emit('membersmuted', payload);\n        return;\n      }\n      case OpType.members_unshutuped: {\n        const payload = {\n          unmutedBy: initBy,\n          members: m,\n        };\n        /**\n         * 有成员在某个对话中被解除禁言\n         * @event IMClient#membersunmuted\n         * @param {Object} payload\n         * @param {String[]} payload.members 成员 id 列表\n         * @param {String} payload.unmutedBy 该操作的发起者 id\n         * @param {ConversationBase} conversation\n         */\n        this.emit('membersunmuted', payload, conversation);\n        /**\n         * 有成员在当前对话中被解除禁言\n         * @event Conversation#membersunmuted\n         * @param {Object} payload\n         * @param {String[]} payload.members 成员 id 列表\n         * @param {String} payload.unmutedBy 该操作的发起者 id\n         */\n        conversation.emit('membersunmuted', payload);\n        return;\n      }\n      case OpType.shutuped: {\n        const payload = {\n          mutedBy: initBy,\n        };\n        /**\n         * 有成员在某个对话中被禁言\n         * @event IMClient#muted\n         * @param {Object} payload\n         * @param {String} payload.mutedBy 该操作的发起者 id\n         * @param {ConversationBase} conversation\n         */\n        this.emit('muted', payload, conversation);\n        /**\n         * 有成员在当前对话中被禁言\n         * @event Conversation#muted\n         * @param {Object} payload\n         * @param {String} payload.mutedBy 该操作的发起者 id\n         */\n        conversation.emit('muted', payload);\n        return;\n      }\n      case OpType.unshutuped: {\n        const payload = {\n          unmutedBy: initBy,\n        };\n        /**\n         * 有成员在某个对话中被解除禁言\n         * @event IMClient#unmuted\n         * @param {Object} payload\n         * @param {String} payload.unmutedBy 该操作的发起者 id\n         * @param {ConversationBase} conversation\n         */\n        this.emit('unmuted', payload, conversation);\n        /**\n         * 有成员在当前对话中被解除禁言\n         * @event Conversation#unmuted\n         * @param {Object} payload\n         * @param {String} payload.unmutedBy 该操作的发起者 id\n         */\n        conversation.emit('unmuted', payload);\n        return;\n      }\n      case OpType.member_info_changed: {\n        const { pid, role } = info;\n        const { memberInfoMap } = internal(conversation);\n        // 如果不存在缓存，且不是 role 的更新，则不通知\n        if (!memberInfoMap && !role) return;\n        const memberInfo = await conversation.getMemberInfo(pid);\n        internal(memberInfo).role = role;\n        const payload = {\n          member: pid,\n          memberInfo,\n          updatedBy: initBy,\n        };\n        /**\n         * 有成员的对话信息被更新\n         * @event IMClient#memberinfoupdated\n         * @param {Object} payload\n         * @param {String[]} payload.member 被更新对话信息的成员 id\n         * @param {ConversationMumberInfo} payload.memberInfo 被更新的成员对话信息\n         * @param {String} payload.updatedBy 该操作的发起者 id\n         * @param {ConversationBase} conversation\n         */\n        this.emit('memberinfoupdated', payload, conversation);\n        /**\n         * 有成员的对话信息被更新\n         * @event Conversation#memberinfoupdated\n         * @param {Object} payload\n         * @param {String[]} payload.member 被更新对话信息的成员 id\n         * @param {ConversationMumberInfo} payload.memberInfo 被更新的成员对话信息\n         * @param {String} payload.updatedBy 该操作的发起者 id\n         */\n        conversation.emit('memberinfoupdated', payload);\n        return;\n      }\n      case OpType.updated: {\n        const attributes = decode(JSON.parse(attr.data));\n        conversation._updateServerAttributes(attributes);\n        const payload = {\n          attributes,\n          updatedBy: initBy,\n        };\n        /**\n         * 该对话信息被更新\n         * @event IMClient#conversationinfoupdated\n         * @param {Object} payload\n         * @param {Object} payload.attributes 被更新的属性\n         * @param {String} payload.updatedBy 该操作的发起者 id\n         * @param {ConversationBase} conversation\n         */\n        this.emit('conversationinfoupdated', payload, conversation);\n        /**\n         * 有对话信息被更新\n         * @event Conversation#infoupdated\n         * @param {Object} payload\n         * @param {Object} payload.attributes 被更新的属性\n         * @param {String} payload.updatedBy 该操作的发起者 id\n         */\n        conversation.emit('infoupdated', payload);\n        return;\n      }\n      default:\n        this.emit('unhandledmessage', message);\n        throw new Error('Unrecognized conversation command');\n    }\n  }\n\n  _dispatchDirectMessage(originalMessage) {\n    const {\n      directMessage,\n      directMessage: {\n        id, cid, fromPeerId, timestamp, transient, patchTimestamp, mentionPids, mentionAll,\n        binaryMsg, msg,\n      },\n    } = originalMessage;\n    const content = binaryMsg ? binaryMsg.toArrayBuffer() : msg;\n    return Promise.all([\n      this.getConversation(directMessage.cid),\n      this._messageParser.parse(content),\n    ]).then(([conversation, message]) => {\n      // deleted conversation\n      if (!conversation) return undefined;\n      const messageProps = {\n        id,\n        cid,\n        timestamp,\n        updatedAt: patchTimestamp,\n        from: fromPeerId,\n        mentionList: mentionPids,\n        mentionedAll: mentionAll,\n      };\n      Object.assign(message, messageProps);\n      message._updateMentioned(this.id);\n      message._setStatus(MessageStatus.SENT);\n      // filter outgoing message sent from another device\n      if (message.from !== this.id) {\n        if (!(transient || conversation.transient)) {\n          this._sendAck(message);\n        }\n      }\n      return this._dispatchParsedMessage(message, conversation);\n    });\n  }\n\n  _dispatchParsedMessage(message, conversation) {\n    // beforeMessageDispatch hook\n    return applyDispatcher(this._plugins.beforeMessageDispatch, [message, conversation])\n      .then((shouldDispatch) => {\n        if (shouldDispatch === false) return;\n        conversation.lastMessage = message; // eslint-disable-line no-param-reassign\n        conversation.lastMessageAt = message.timestamp; // eslint-disable-line no-param-reassign\n        // filter outgoing message sent from another device\n        if (message.from !== this.id) {\n          conversation.unreadMessagesCount += 1; // eslint-disable-line no-param-reassign\n          if (message.mentioned) conversation._setUnreadMessagesMentioned(true);\n        }\n        /**\n         * 当前用户收到消息\n         * @event IMClient#message\n         * @param {Message} message\n         * @param {ConversationBase} conversation 收到消息的对话\n         */\n        this.emit('message', message, conversation);\n        /**\n         * 当前对话收到消息\n         * @event Conversation#message\n         * @param {Message} message\n         */\n        conversation.emit('message', message);\n      });\n  }\n\n  _sendAck(message) {\n    this._debug('send ack for %O', message);\n    const { cid } = message;\n    if (!cid) {\n      throw new Error('missing cid');\n    }\n    if (!this._ackMessageBuffer[cid]) {\n      this._ackMessageBuffer[cid] = [];\n    }\n    this._ackMessageBuffer[cid].push(message);\n    return this._doSendAck();\n  }\n\n  // jsdoc-ignore-start\n  @throttle(1000)\n  // jsdoc-ignore-end\n  _doSendAck() {\n    // if not connected, just skip everything\n    if (!this._connection.is('connected')) return;\n    this._debug('do send ack %O', this._ackMessageBuffer);\n    Promise.all(Object.keys(this._ackMessageBuffer).map((cid) => {\n      const convAckMessages = this._ackMessageBuffer[cid];\n      const timestamps = convAckMessages.map(message => message.timestamp);\n      const command = new GenericCommand({\n        cmd: 'ack',\n        peerId: this.id,\n        ackMessage: new AckCommand({\n          cid,\n          fromts: Math.min.apply(null, timestamps),\n          tots: Math.max.apply(null, timestamps),\n        }),\n      });\n      delete this._ackMessageBuffer[cid];\n      return this._send(command, false).catch((error) => {\n        this._debug('send ack failed: %O', error);\n        this._ackMessageBuffer[cid] = convAckMessages;\n      });\n    }));\n  }\n\n  _omitPeerId(value) {\n    internal(this).peerIdOmittable = value;\n  }\n\n  _send(cmd, ...args) {\n    const command = cmd;\n    if (!internal(this).peerIdOmittable && this.id) {\n      command.peerId = this.id;\n    }\n    return this._connection.send(command, ...args);\n  }\n\n  _open(appId, tag, deviceId, isReconnect = false) {\n    this._debug('open session');\n    const {\n      lastUnreadNotifTime,\n      lastPatchTime,\n    } = internal(this);\n    return Promise\n      .resolve(new GenericCommand({\n        cmd: 'session',\n        op: 'open',\n        appId,\n        peerId: this.id,\n        sessionMessage: new SessionCommand({\n          ua: `js/${VERSION}`,\n          r: isReconnect,\n          lastUnreadNotifTime,\n          lastPatchTime,\n          configBitmap,\n        }),\n      }))\n      .then(async (command) => {\n        if (isReconnect) {\n          const sessionToken = await this._sessionManager.getSessionToken({ autoRefresh: false });\n          if (sessionToken && sessionToken !== Expirable.EXPIRED) {\n            Object.assign(command.sessionMessage, {\n              st: sessionToken,\n            });\n            return command;\n          }\n        }\n        Object.assign(command.sessionMessage, trim({\n          tag,\n          deviceId,\n        }));\n        if (this.options.signatureFactory) {\n          const signatureResult = await runSignatureFactory(\n            this.options.signatureFactory,\n            [this._identity],\n          );\n          Object.assign(command.sessionMessage, keyRemap({\n            signature: 's',\n            timestamp: 't',\n            nonce: 'n',\n          }, signatureResult));\n        }\n        return command;\n      })\n      .then(this._send.bind(this))\n      .then((resCommand) => {\n        const {\n          peerId,\n          sessionMessage,\n          sessionMessage: {\n            st: token,\n            stTtl: tokenTTL,\n            code,\n          },\n        } = resCommand;\n        if (code) {\n          throw createError(sessionMessage);\n        }\n        if (!peerId) {\n          console.warn('Unexpected session opened without peerId.');\n          return;\n        }\n        this.id = peerId;\n        if (!this._identity) this._identity = peerId;\n        if (token) {\n          this._sessionManager = this._sessionManager || this._createSessionManager();\n          this._sessionManager.setSessionToken(token, tokenTTL);\n        }\n      })\n      .catch((error) => {\n        if (error.code === ErrorCode.SESSION_TOKEN_EXPIRED) {\n          if (!this._sessionManager) {\n            // let it fail if sessoinToken not cached but command rejected as token expired\n            // to prevent session openning flood\n            throw new Error('Unexpected session expiration');\n          }\n          debug('Session token expired, reopening');\n          this._sessionManager.revoke();\n          return this._open(appId, tag, deviceId, isReconnect);\n        }\n        throw error;\n      });\n  }\n\n  _createSessionManager() {\n    debug('create SessionManager');\n    return new SessionManager({\n      onBeforeGetSessionToken: this._connection.checkConnectionAvailability.bind(this._connection),\n      refresh: (manager, expiredSessionToken) =>\n        manager.setSessionTokenAsync(Promise.resolve(new GenericCommand({\n          cmd: 'session',\n          op: 'refresh',\n          sessionMessage: new SessionCommand({\n            ua: `js/${VERSION}`,\n            st: expiredSessionToken,\n          }),\n        })).then(async (command) => {\n          if (this.options.signatureFactory) {\n            const signatureResult = await runSignatureFactory(\n              this.options.signatureFactory,\n              [this._identity],\n            );\n            Object.assign(command.sessionMessage, keyRemap({\n              signature: 's',\n              timestamp: 't',\n              nonce: 'n',\n            }, signatureResult));\n          }\n          return command;\n        }).then(this._send.bind(this)).then(({\n          sessionMessage: {\n            st: token,\n            stTtl: ttl,\n          },\n        }) => [token, ttl])),\n    });\n  }\n\n  async _requestWithSessionToken({\n    headers,\n    query,\n    ...params\n  }) {\n    const sessionToken = await this._sessionManager.getSessionToken();\n    return this._request({\n      headers: {\n        'X-LC-IM-Session-Token': sessionToken,\n        ...headers,\n      },\n      query: {\n        client_id: this.id,\n        ...query,\n      },\n      ...params,\n    });\n  }\n\n  /**\n   * 关闭客户端\n   * @return {Promise}\n   */\n  async close() {\n    this._debug('close session');\n    if (this._connection.is('connected')) {\n      const command = new GenericCommand({\n        cmd: 'session',\n        op: 'close',\n      });\n      await this._send(command);\n    }\n    internal(this)._eventemitter.emit('close');\n    this.emit('close', {\n      code: 0,\n    });\n  }\n  /**\n   * 获取 client 列表中在线的 client，每次查询最多 20 个 clientId，超出部分会被忽略\n   * @param  {String[]} clientIds 要查询的 client ids\n   * @return {Primse.<String[]>} 在线的 client ids\n   */\n  async ping(clientIds) {\n    this._debug('ping');\n    if (!(clientIds instanceof Array)) {\n      throw new TypeError(`clientIds ${clientIds} is not an Array`);\n    }\n    if (!clientIds.length) {\n      return Promise.resolve([]);\n    }\n    const command = new GenericCommand({\n      cmd: 'session',\n      op: 'query',\n      sessionMessage: new SessionCommand({\n        sessionPeerIds: clientIds,\n      }),\n    });\n    const resCommand = await this._send(command);\n    return resCommand.sessionMessage.onlineSessionPeerIds;\n  }\n\n  /**\n   * 获取某个特定的对话\n   * @param  {String} id 对话 id，对应 _Conversation 表中的 objectId\n   * @param  {Boolean} [noCache=false] 强制不从缓存中获取\n   * @return {Promise.<ConversationBase>} 如果 id 对应的对话不存在则返回 null\n   */\n  async getConversation(id, noCache = false) {\n    if (typeof id !== 'string') {\n      throw new TypeError(`${id} is not a String`);\n    }\n    if (!noCache) {\n      const cachedConversation = this._conversationCache.get(id);\n      if (cachedConversation) {\n        return cachedConversation;\n      }\n    }\n    if (isTemporaryConversatrionId(id)) {\n      return (await this._getTemporaryConversations([id]))[0] || null;\n    }\n    return this\n      .getQuery()\n      .equalTo('objectId', id)\n      .find()\n      .then(conversations => conversations[0] || null);\n  }\n\n  /**\n   * 通过 id 批量获取某个特定的对话\n   * @since 3.4.0\n   * @param  {String[]} ids 对话 id 列表，对应 _Conversation 表中的 objectId\n   * @param  {Boolean} [noCache=false] 强制不从缓存中获取\n   * @return {Promise.<ConversationBase[]>} 如果 id 对应的对话不存在则返回 null\n   */\n  async getConversations(ids, noCache = false) {\n    const remoteConversationIds =\n      noCache ? ids : ids.filter(id => this._conversationCache.get(id) === null);\n    if (remoteConversationIds.length) {\n      const remoteTemporaryConversationIds =\n        remove(remoteConversationIds, isTemporaryConversatrionId);\n      const query = [];\n      if (remoteConversationIds.length) {\n        query.push(this.getQuery().containedIn('objectId', remoteConversationIds).limit(999).find());\n      }\n      if (remoteTemporaryConversationIds.length) {\n        const remoteTemporaryConversationsPromise =\n          remoteTemporaryConversationIds.map(this._getTemporaryConversations.bind(this));\n        query.push(...remoteTemporaryConversationsPromise);\n      }\n      await Promise.all(query);\n    }\n    return ids.map(id => this._conversationCache.get(id));\n  }\n\n  async _getTemporaryConversations(ids) {\n    const command = new GenericCommand({\n      cmd: 'conv',\n      op: 'query',\n      convMessage: new ConvCommand({\n        tempConvIds: ids,\n      }),\n    });\n    const resCommand = await this._send(command);\n    return this._handleQueryResults(resCommand);\n  }\n\n  /**\n   * 构造一个 ConversationQuery 来查询对话\n   * @return {ConversationQuery.<PersistentConversation>}\n   */\n  getQuery() {\n    return new ConversationQuery(this);\n  }\n\n  /**\n   * 构造一个 ConversationQuery 来查询聊天室\n   * @return {ConversationQuery.<ChatRoom>}\n   */\n  getChatRoomQuery() {\n    return this.getQuery().equalTo('tr', true);\n  }\n\n  /**\n   * 构造一个 ConversationQuery 来查询服务号\n   * @return {ConversationQuery.<ServiceConversation>}\n   */\n  getServiceConversationQuery() {\n    return this.getQuery().equalTo('sys', true);\n  }\n\n  async _executeQuery(query) {\n    const queryJSON = query.toJSON();\n    queryJSON.where = new JsonObjectMessage({\n      data: JSON.stringify(encode(queryJSON.where)),\n    });\n    const command = new GenericCommand({\n      cmd: 'conv',\n      op: 'query',\n      convMessage: new ConvCommand(queryJSON),\n    });\n    const resCommand = await this._send(command);\n    return this._handleQueryResults(resCommand);\n  }\n\n  async _handleQueryResults(resCommand) {\n    let conversations;\n    try {\n      conversations = decode(JSON.parse(resCommand.convMessage.results.data));\n    } catch (error) {\n      const commandString = JSON.stringify(trim(resCommand));\n      throw new Error(`Parse query result failed: ${error.message}. Command: ${commandString}`);\n    }\n    conversations =\n      await Promise.all(conversations.map(this._parseConversationFromRawData.bind(this)));\n    return conversations.map(this._upsertConversationToCache.bind(this));\n  }\n\n  _upsertConversationToCache(fetchedConversation) {\n    let conversation = this._conversationCache.get(fetchedConversation.id);\n    if (!conversation) {\n      conversation = fetchedConversation;\n      this._debug('no match, set cache');\n      this._conversationCache.set(fetchedConversation.id, fetchedConversation);\n    } else {\n      this._debug('update cached conversation');\n      [\n        'creator',\n        'createdAt',\n        'updatedAt',\n        'lastMessageAt',\n        'lastMessage',\n        'mutedMembers',\n        'members',\n        '_attributes',\n        'transient',\n        'muted',\n      ].forEach((key) => {\n        const value = fetchedConversation[key];\n        if (value !== undefined) conversation[key] = value;\n      });\n      if (conversation._reset) conversation._reset();\n    }\n    return conversation;\n  }\n\n  /**\n   * 反序列化消息，与 {@link Message#toFullJSON} 相对。\n   * @param {Object}\n   * @return {AVMessage} 解析后的消息\n   * @since 4.0.0\n   */\n  async parseMessage({\n    data,\n    bin = false,\n    ...properties\n  }) {\n    const content = bin ? decodeBase64(data) : data;\n    const message = await this._messageParser.parse(content);\n    Object.assign(message, properties);\n    message._updateMentioned(this.id);\n    return message;\n  }\n\n  /**\n   * 反序列化对话，与 {@link Conversation#toFullJSON} 相对。\n   * @param {Object}\n   * @return {ConversationBase} 解析后的对话\n   * @since 4.0.0\n   */\n  async parseConversation({\n    id,\n    lastMessageAt,\n    lastMessage,\n    lastDeliveredAt,\n    lastReadAt,\n    unreadMessagesCount,\n    members,\n    mentioned,\n    ...properties\n  }) {\n    const conversationData = {\n      id,\n      lastMessageAt,\n      lastMessage,\n      lastDeliveredAt,\n      lastReadAt,\n      unreadMessagesCount,\n      members,\n      mentioned,\n    };\n    if (lastMessage) {\n      conversationData.lastMessage = await this.parseMessage(lastMessage);\n      conversationData.lastMessage._setStatus(MessageStatus.SENT);\n    }\n    const {\n      transient,\n      system,\n      expiredAt,\n    } = properties;\n    if (transient) return new ChatRoom(conversationData, properties, this);\n    if (system) return new ServiceConversation(conversationData, properties, this);\n    if (expiredAt || isTemporaryConversatrionId(id)) {\n      return new TemporaryConversation(conversationData, { expiredAt }, this);\n    }\n    return new Conversation(conversationData, properties, this);\n  }\n\n  async _parseConversationFromRawData(rawData) {\n    const data = keyRemap({\n      objectId: 'id',\n      lm: 'lastMessageAt',\n      m: 'members',\n      tr: 'transient',\n      sys: 'system',\n      c: 'creator',\n      mu: 'mutedMembers',\n    }, rawData);\n    if (data.msg) {\n      data.lastMessage = {\n        data: data.msg,\n        bin: data.bin,\n        from: data.msg_from,\n        id: data.msg_mid,\n        timestamp: data.msg_timestamp,\n        updatedAt: data.patch_timestamp,\n      };\n      delete data.lastMessageFrom;\n      delete data.lastMessageId;\n      delete data.lastMessageTimestamp;\n      delete data.lastMessagePatchTimestamp;\n    }\n    const { ttl } = data;\n    if (ttl) data.expiredAt = Date.now() + (ttl * 1000);\n    return this.parseConversation(data);\n  }\n\n  /**\n   * 创建一个对话\n   * @param {Object} options 除了下列字段外的其他字段将被视为对话的自定义属性\n   * @param {String[]} options.members 对话的初始成员列表，默认包含当前 client\n   * @param {String} [options.name] 对话的名字\n   * @param {Boolean} [options.unique=false] 唯一对话，当其为 true 时，如果当前已经有相同成员的对话存在则返回该对话，否则会创建新的对话\n   * @return {Promise.<Conversation>}\n   */\n  async createConversation({\n    members: m,\n    name,\n    transient,\n    unique,\n    _tempConv: tempConv,\n    _tempConvTTL: tempConvTTL,\n    ...properties\n  } = {}) {\n    if (!(transient || Array.isArray(m))) {\n      throw new TypeError(`conversation members ${m} is not an array`);\n    }\n    let members = new Set(m);\n    members.add(this.id);\n    members = Array.from(members).sort();\n    let attr = properties || {};\n    if (name) {\n      if (typeof name !== 'string') {\n        throw new TypeError(`conversation name ${name} is not a string`);\n      }\n      attr.name = name;\n    }\n    attr = new JsonObjectMessage({\n      data: JSON.stringify(encode(attr)),\n    });\n\n    const startCommandJson = {\n      m: members,\n      attr,\n      transient,\n      unique,\n      tempConv,\n      tempConvTTL,\n    };\n\n    const command = new GenericCommand({\n      cmd: 'conv',\n      op: 'start',\n      convMessage: new ConvCommand(startCommandJson),\n    });\n\n    if (this.options.conversationSignatureFactory) {\n      const params = [null, this._identity, members, 'create'];\n      const signatureResult = await runSignatureFactory(\n        this.options.conversationSignatureFactory,\n        params,\n      );\n      Object.assign(command.convMessage, keyRemap({\n        signature: 's',\n        timestamp: 't',\n        nonce: 'n',\n      }, signatureResult));\n    }\n\n    const {\n      convMessage: {\n        cid, cdate, tempConvTTL: ttl,\n      },\n    } = await this._send(command);\n    const data = {\n      name,\n      transient,\n      unique,\n      id: cid,\n      createdAt: cdate,\n      updatedAt: cdate,\n      lastMessageAt: null,\n      creator: this.id,\n      members: transient ? [] : members,\n      ...properties,\n    };\n    if (ttl) data.expiredAt = Date.now() + (ttl * 1000);\n    const conversation = await this.parseConversation(data);\n    return this._upsertConversationToCache(conversation);\n  }\n\n  /**\n   * 创建一个聊天室\n   * @since 4.0.0\n   * @param {Object} options 除了下列字段外的其他字段将被视为对话的自定义属性\n   * @param {String} [options.name] 对话的名字\n   * @return {Promise.<ChatRoom>}\n   */\n  async createChatRoom(param) {\n    return this.createConversation({\n      ...param,\n      transient: true,\n      members: null,\n      unique: false,\n    });\n  }\n\n  /**\n   * 创建一个临时对话\n   * @since 4.0.0\n   * @param {Object} options\n   * @param {String[]} options.members 对话的初始成员列表，默认包含当前 client\n   * @param {String} [options.ttl] 对话存在时间，单位为秒，最大值与默认值均为 86400（一天），过期后该对话不再可用。\n   * @return {Promise.<TemporaryConversation>}\n   */\n  async createTemporaryConversation({\n    ttl: _tempConvTTL,\n    ...param\n  }) {\n    return this.createConversation({\n      ...param,\n      transient: false,\n      unique: false,\n      _tempConv: true,\n      _tempConvTTL,\n    });\n  }\n\n  // jsdoc-ignore-start\n  @throttle(1000)\n  // jsdoc-ignore-end\n  _doSendRead() {\n    // if not connected, just skip everything\n    if (!this._connection.is('connected')) return;\n    const buffer = internal(this).readConversationsBuffer;\n    const conversations = Array.from(buffer);\n    if (!conversations.length) return;\n    const ids = conversations.map((conversation) => {\n      if (!(conversation instanceof ConversationBase)) {\n        throw new TypeError(`${conversation} is not a Conversation`);\n      }\n      return conversation.id;\n    });\n    this._debug(`mark [${ids}] as read`);\n    buffer.clear();\n    this._sendReadCommand(conversations).catch((error) => {\n      this._debug('send read failed: %O', error);\n      conversations.forEach(buffer.add.bind(buffer));\n    });\n  }\n  _sendReadCommand(conversations) {\n    return this._send(new GenericCommand({\n      cmd: 'read',\n      readMessage: new ReadCommand({\n        convs: conversations.map(conversation => new ReadTuple({\n          cid: conversation.id,\n          mid: (conversation.lastMessage && conversation.lastMessage.from !== this.id)\n            ? conversation.lastMessage.id : undefined,\n          timestamp: (conversation.lastMessageAt || new Date()).getTime(),\n        })),\n      }),\n    }), false);\n  }\n}\n","import { encode as encodeBase64 } from 'base64-arraybuffer';\nimport Message from './message';\n\nexport default class BinaryMessage extends Message {\n  /**\n   * 二进制消息\n   * @extends Message\n   * @param {ArrayBuffer} buffer\n   * @since 4.0.0\n   */\n  constructor(buffer) {\n    if (!(buffer instanceof ArrayBuffer)) {\n      throw new TypeError(`${buffer} is not an ArrayBuffer`);\n    }\n    super(buffer);\n  }\n\n  /**\n   * @type ArrayBuffer\n   */\n  get buffer() {\n    return this.content;\n  }\n  set buffer(buffer) {\n    this.content = buffer;\n  }\n\n  static validate(target) {\n    return target instanceof ArrayBuffer;\n  }\n\n  toJSON() {\n    return {\n      ...super._toJSON(),\n      data: encodeBase64(this.content),\n    };\n  }\n\n  toFullJSON() {\n    return {\n      ...super.toFullJSON(),\n      bin: true,\n      data: encodeBase64(this.content),\n    };\n  }\n}\n","import TypedMessage from './typed-message';\nimport { messageType, IE10Compatible } from './helpers';\n\n// jsdoc-ignore-start\n@messageType(-1)\n@IE10Compatible\n// jsdoc-ignore-end\nexport default class TextMessage extends TypedMessage {\n  /**\n   * 文类类型消息\n   * @extends TypedMessage\n   * @param  {String} [text='']\n   * @throws {TypeError} text 不是 String 类型\n   */\n  constructor(text = '') {\n    if (typeof text !== 'string') {\n      throw new TypeError(`${text} is not a string`);\n    }\n    super();\n    this.setText(text);\n  }\n}\n\n/**\n * @name TYPE\n * @memberof TextMessage\n * @type Number\n * @static\n * @const\n */\n","import d from 'debug';\nimport isPlainObject from 'lodash/isPlainObject';\nimport { applyMiddlewares } from './plugin';\n\nconst debug = d('LC:MessageParser');\n\nconst tryParseJson = (target, key, descriptor) => {\n  const fn = descriptor.value;\n  // eslint-disable-next-line no-param-reassign\n  descriptor.value = function wrapper(param) {\n    let content;\n    if (typeof param !== 'string') {\n      content = param;\n    } else {\n      try {\n        content = JSON.parse(param);\n      } catch (error) {\n        content = param;\n      }\n    }\n    return fn.call(this, content);\n  };\n};\n\nconst applyPlugins = (target, key, descriptor) => {\n  const fn = descriptor.value;\n  // eslint-disable-next-line no-param-reassign\n  descriptor.value = function wrapper(json) {\n    return Promise.resolve(json)\n      .then(applyMiddlewares(this._plugins.beforeMessageParse))\n      .then(decoratedJson => fn.call(this, decoratedJson))\n      .then(applyMiddlewares(this._plugins.afterMessageParse));\n  };\n};\n\nexport default class MessageParser {\n  constructor(plugins = {}) {\n    this._plugins = plugins;\n    this._messageClasses = [];\n  }\n\n  register(messageClass) {\n    if (\n      messageClass &&\n      messageClass.parse &&\n      messageClass.prototype &&\n      messageClass.prototype.getPayload\n    ) {\n      this._messageClasses.unshift(messageClass);\n    } else {\n      throw new TypeError('Invalid messageClass');\n    }\n  }\n\n  // jsdoc-ignore-start\n  @tryParseJson\n  @applyPlugins\n  // jsdoc-ignore-end\n  parse(content) {\n    debug('parsing message: %O', content);\n    // eslint-disable-next-line no-restricted-syntax\n    for (const Klass of this._messageClasses) {\n      const contentCopy = isPlainObject(content) ? Object.assign({}, content) : content;\n      let valid;\n      let result;\n      try {\n        valid = Klass.validate(contentCopy);\n      } catch (error) {\n        // eslint-disable-line no-empty\n      }\n      if (valid) {\n        try {\n          result = Klass.parse(contentCopy);\n        } catch (error) {\n          console.warn('parsing a valid message content error', {\n            error,\n            Klass,\n            content: contentCopy,\n          });\n        }\n        if (result !== undefined) {\n          debug('parse result: %O', result);\n          return result;\n        }\n      }\n    }\n    throw new Error('No Message Class matched');\n  }\n}\n","/** @module leancloud-realtime */\nimport d from 'debug';\nimport uuid from 'uuid/v4';\nimport IMClient from './im-client';\nimport { Conversation } from './conversations';\nimport { MessageQueryDirection } from './conversations/conversation-base';\nimport Message, { MessageStatus } from './messages/message';\nimport BinaryMessage from './messages/binary-message';\nimport TextMessage from './messages/text-message';\nimport TypedMessage from './messages/typed-message';\nimport RecalledMessage from './messages/recalled-message';\nimport MessageParser from './message-parser';\nimport { trim, internal, ensureArray } from './utils';\n\nconst debug = d('LC:IMPlugin');\n\n/**\n * 消息优先级枚举\n * @enum {Number}\n * @since 3.3.0\n */\nconst MessagePriority = {\n  /** 高 */\n  HIGH: 1,\n  /** 普通 */\n  NORMAL: 2,\n  /** 低 */\n  LOW: 3,\n};\nObject.freeze(MessagePriority);\n\n/**\n * 为 Conversation 定义一个新属性\n * @param {String} prop 属性名\n * @param {Object} [descriptor] 属性的描述符，参见 {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptor#Description getOwnPropertyDescriptor#Description - MDN}，默认为该属性名对应的 Conversation 自定义属性的 getter/setter\n * @returns void\n * @example\n *\n * conversation.get('type');\n * conversation.set('type', 1);\n *\n * // equals to\n * defineConversationProperty('type');\n * conversation.type;\n * conversation.type = 1;\n */\nconst defineConversationProperty = (prop, descriptor = {\n  get() { return this.get(prop); },\n  set(value) { this.set(prop, value); },\n}) => {\n  Object.defineProperty(Conversation.prototype, prop, descriptor);\n};\n\nexport {\n  /**\n   * @see Message\n   */\n  Message,\n  /**\n   * @see BinaryMessage\n   */\n  BinaryMessage,\n  /**\n   * @see TypedMessage\n   */\n  TypedMessage,\n  /**\n   * @see TextMessage\n   */\n  TextMessage,\n  /**\n   * @see RecalledMessage\n   */\n  RecalledMessage,\n  MessagePriority,\n  MessageStatus,\n  MessageQueryDirection,\n  defineConversationProperty,\n};\n\nexport {\n  /**\n   * decorator，定义消息类的类型常量\n   * @function\n   * @param {Number} type 自定义类型请使用正整数\n   * @example @messageType(1)\n   * class CustomMessage extends TypedMessage {}\n   *\n   * // 不支持 decorator 的情况下可以这样使用\n   * class CustomMessage extends TypedMessage {\n   *   //...\n   * }\n   * messageType(1)(CustomMessage);\n   */\n  messageType,\n  /**\n   * decorator，定义消息类的自定义字段\n   * @function\n   * @param {String[]} fields 自定义字段\n   * @example @messageField(['foo'])\n   * class CustomMessage extends TypedMessage {\n   *   constructor(foo) {\n   *     super();\n   *     this.foo = foo;\n   *   }\n   * }\n   *\n   * // 不支持 decorator 的情况下可以这样使用\n   * class CustomMessage extends TypedMessage {\n   *   constructor(foo) {\n   *     super();\n   *     this.foo = foo;\n   *   }\n   *   //...\n   * }\n   * messageField(['foo'])(CustomMessage);\n   */\n  messageField,\n  IE10Compatible,\n} from './messages/helpers';\n\nexport { ConversationMemberRole } from './conversation-member-info';\nexport {\n  /**\n   * @see Conversation\n   */\n  Conversation,\n  /**\n   * @see ChatRoom\n   */\n  ChatRoom,\n  /**\n   * @see ServiceConversation\n   */\n  ServiceConversation,\n  /**\n   * @see TemporaryConversation\n   */\n  TemporaryConversation,\n} from './conversations';\n\nconst onRealtimeCreate = (realtime) => {\n  /* eslint-disable no-param-reassign */\n  const deviceId = uuid();\n  realtime._IMClients = {};\n  realtime._IMClientsCreationCount = 0;\n  const messageParser = new MessageParser(realtime._plugins);\n  realtime._messageParser = messageParser;\n\n  const signAVUser = async user => realtime._request({\n    method: 'POST',\n    path: '/rtm/sign',\n    data: {\n      session_token: user.getSessionToken(),\n    },\n  });\n\n  /**\n   * 注册消息类\n   *\n   * 在接收消息、查询消息时，会按照消息类注册顺序的逆序依次尝试解析消息内容\n   *\n   * @memberof Realtime\n   * @instance\n   * @param  {Function | Function[]} messageClass 消息类，需要实现 {@link AVMessage} 接口，\n   * 建议继承自 {@link TypedMessage}\n   * @throws {TypeError} 如果 messageClass 没有实现 {@link AVMessage} 接口则抛出异常\n   */\n  const register = messageClass =>\n    ensureArray(messageClass).map(messageParser.register.bind(messageParser));\n  register(ensureArray(realtime._plugins.messageClasses));\n  /**\n   * 创建一个即时通讯客户端，多次创建相同 id 的客户端会返回同一个实例\n   * @memberof Realtime\n   * @instance\n   * @param  {String|AV.User} [identity] 客户端 identity，如果不指定该参数，服务端会随机生成一个字符串作为 identity，\n   * 如果传入一个已登录的 AV.User，则会使用该用户的 id 作为客户端 identity 登录。\n   * @param  {Object} [options]\n   * @param  {Function} [options.signatureFactory] open session 时的签名方法 // TODO need details\n   * @param  {Function} [options.conversationSignatureFactory] 对话创建、增减成员操作时的签名方法\n   * @param  {Function} [options.blacklistSignatureFactory] 黑名单操作时的签名方法\n   * @param  {String} [options.tag] 客户端类型标记，以支持单点登录功能\n   * @param  {String} [options.isReconnect=false] 单点登录时标记该次登录是不是应用启动时自动重新登录\n   * @return {Promise.<IMClient>}\n   */\n  const createIMClient = async (identity, {\n    tag,\n    isReconnect,\n    ...clientOptions\n  } = {}, lagecyTag) => {\n    let id;\n    const buildinOptions = {};\n    if (identity) {\n      if (typeof identity === 'string') {\n        id = identity;\n      } else if (identity.id && identity.getSessionToken) {\n        ({ id } = identity);\n        const sessionToken = identity.getSessionToken();\n        if (!sessionToken) {\n          throw new Error('User must be authenticated');\n        }\n        buildinOptions.signatureFactory = signAVUser;\n      } else {\n        throw new TypeError('Identity must be a String or an AV.User');\n      }\n      if (realtime._IMClients[id] !== undefined) {\n        return realtime._IMClients[id];\n      }\n    }\n    if (lagecyTag) {\n      console.warn('DEPRECATION createIMClient tag param: Use options.tag instead.');\n    }\n    const _tag = tag || lagecyTag;\n    const promise = realtime._open().then((connection) => {\n      const client = new IMClient(id, { ...buildinOptions, ...clientOptions }, {\n        _connection: connection,\n        _request: realtime._request.bind(realtime),\n        _messageParser: messageParser,\n        _plugins: realtime._plugins,\n        _identity: identity,\n      });\n      connection.on('reconnect', () =>\n        client._open(realtime._options.appId, _tag, deviceId, true)\n          /**\n           * 客户端连接恢复正常，该事件通常在 {@link Realtime#event:reconnect} 之后发生\n           * @event IMClient#reconnect\n           * @see Realtime#event:reconnect\n           * @since 3.2.0\n           */\n          /**\n           * 客户端重新登录发生错误（网络连接已恢复，但重新登录错误）\n           * @event IMClient#reconnecterror\n           * @since 3.2.0\n           */\n          .then(\n            () => client.emit('reconnect'),\n            error => client.emit('reconnecterror', error),\n          ));\n      internal(client)._eventemitter.on('close', () => {\n        delete realtime._IMClients[client.id];\n        realtime._deregister(client);\n      }, realtime);\n      return client._open(realtime._options.appId, _tag, deviceId, isReconnect)\n        .then(() => {\n          realtime._IMClients[client.id] = client;\n          realtime._IMClientsCreationCount += 1;\n          if (realtime._IMClientsCreationCount === 1) {\n            client._omitPeerId(true);\n            realtime._firstIMClient = client;\n          } else if (realtime._IMClientsCreationCount > 1 && realtime._firstIMClient) {\n            realtime._firstIMClient._omitPeerId(false);\n          }\n          realtime._register(client);\n          return client;\n        }).catch((error) => {\n          delete realtime._IMClients[client.id];\n          throw error;\n        });\n    });\n    if (identity) {\n      realtime._IMClients[id] = promise;\n    }\n    return promise;\n  };\n  Object.assign(realtime, {\n    register,\n    createIMClient,\n  });\n  /* eslint-enable no-param-reassign */\n};\n\nconst beforeCommandDispatch = (command, realtime) => {\n  const isIMCommand = command.service === null || command.service === 2;\n  if (!isIMCommand) return true;\n  const targetClient = command.peerId ?\n    realtime._IMClients[command.peerId] :\n    realtime._firstIMClient;\n  if (targetClient) {\n    Promise.resolve(targetClient).then(client => client._dispatchCommand(command)).catch(debug);\n  } else {\n    debug(\n      '[WARN] Unexpected message received without any live client match: %O',\n      trim(command),\n    );\n  }\n  return false;\n};\n\nexport const IMPlugin = {\n  name: 'leancloud-realtime-plugin-im',\n  onRealtimeCreate,\n  beforeCommandDispatch,\n  messageClasses: [\n    Message,\n    BinaryMessage,\n    RecalledMessage,\n    TextMessage,\n  ],\n};\n","import { Realtime } from './core';\nimport { IMPlugin, defineConversationProperty } from './plugin-im';\n\nRealtime.defineConversationProperty = defineConversationProperty;\nRealtime.__preRegisteredPlugins = [IMPlugin];\n\nexport * from './core';\n\nexport * from './plugin-im';\n"],"names":["module","require","newBuilder","build","messages","push_server","messages2","JsonObjectMessage","UnreadTuple","LogItem","DataCommand","SessionCommand","ErrorCommand","DirectCommand","AckCommand","UnreadCommand","ConvCommand","RoomCommand","LogsCommand","RcpCommand","ReadTuple","MaxReadTuple","ReadCommand","PresenceCommand","ReportCommand","GenericCommand","BlacklistCommand","PatchCommand","PatchItem","ConvMemberInfo","CommandType","OpType","StatusType","global","window","EXPIRED","debug","d","Expirable","value","ttl","originalValue","expiredAt","Date","now","expired","Cache","name","_map","get","key","cache","set","tryAll","promiseConstructors","promise","length","catch","slice","tap","interceptor","decodeDate","date","__type","iso","toNumber","getTime","undefined","decode","isPlainObject","reduce","result","encode","toJSON","keyRemap","keymap","obj","newObj","newKey","isIE10","navigator","userAgent","indexOf","getStaticProperty","klass","property","__proto__","union","a","b","difference","filter","bSet","has","x","map","internal","object","compact","prop","hasOwnProperty","call","removeNull","trim","JSON","parse","message","ensureArray","target","Array","isArray","setValue","segs","split","lastSeg","pop","currentTarget","forEach","seg","isWeapp","wx","connectSocket","throttle","descriptor","callback","Error","throttleMeta","propertyMeta","previouseTimestamp","timeout","remainingTime","wait","apply","setTimeout","HEARTBEAT_TIME","TIMEOUT_TIME","DEFAULT_RETRY_STRATEGY","Math","min","attempt","requireConnected","requireConnectedWrapper","checkConnectionAvailability","args","WebSocketPlus","getUrls","protocol","WebSocket","_getUrls","resolve","_protocol","init","_createWs","then","__postponeTimeoutTimer","_postponeTimeoutTimer","bind","addEventListener","__pause","pause","__resume","resume","open","throw","urls","reject","url","ws","binaryType","onopen","onclose","error","onerror","_ws","_handleClose","onmessage","_handleMessage","_destroyWs","close","onbeforeevent","event","from","to","payload","emit","onconnected","_startConnectionKeeper","onleaveconnected","_stopConnectionKeeper","onpause","onbeforeresume","onreconnect","ondisconnected","delay","__scheduledRetry","is","retry","onretry","can","reconnect","fail","removeEventListener","currentState","current","warn","_ping","ping","_clearTimeoutTimers","_timeoutTimer","disconnect","_heartbeatTimer","setInterval","addListener","removeListener","code","reason","isFinished","handleClose","send","data","handleMessage","EventEmitter","StateMachine","create","prototype","ErrorCode","Number","createError","errorMessage","appCode","detail","err","COMMAND_TIMEOUT","Connection","getUrl","format","version","protocolString","encodeURIComponent","_protocalFormat","_commands","_serialId","command","waitingForRespond","serialId","i","toBase64","toArrayBuffer","TypeError","msg","e","cmd","echo","checkType","param","constructor","middleware","console","_pluginName","applyDecorators","decorators","decorator","applyMiddlewares","middlewares","previousPromise","applyDispatcher","dispatchers","resultPromise","dispatcher","shouldDispatch","debugRequest","routerCache","Realtime","options","appId","appKey","_options","process","env","RTM_SERVER_NAME","_cache","clients","_plugins","__preRegisteredPlugins","plugins","plugin","hook","concat","onRealtimeCreate","_request","method","path","query","headers","region","_getServerUrls","api","axios","response","status","_open","_openPromise","noBinary","pushOfflineMessages","connection","_getRTMServers","on","_dispatchCommand","client","isFatal","APP_NOT_AVAILABLE","INVALID_LOGIN","INVALID_ORIGIN","some","errorCode","RTMServers","shuffle","cachedEndPoints","_fetchRTMServers","info","server","secondary","cachedRouter","res","RTMRouter","rtm_router_server","api_server","serverUrls","id","toLowerCase","ssl","RTMServerName","_close","cannot","_register","add","_deregister","delete","size","beforeCommandDispatch","MessageStatus","rMessageStatus","NONE","SENDING","SENT","DELIVERED","READ","FAILED","Message","content","uuid","_setStatus","getPayload","_toJSON","cid","timestamp","deliveredAt","updatedAt","mentionList","mentionedAll","mentioned","toFullJSON","_updatedAt","_status","_updateMentioned","_mentioned","getMentionList","setMentionList","mentionAll","Boolean","validate","json","_timestamp","_deliveredAt","messageType","type","TYPE","_lctype","_getType","messageField","fields","originalCustomFields","_customFields","IE10Compatible","TypedMessage","setText","text","_lctext","getText","setAttributes","attributes","_lcattrs","getAttributes","_getCustomFields","field","summary","customFields","RecalledMessage","serializeMessage","binaryMsg","ArrayBuffer","QueryDirection","NEW","OLD","MessageQueryDirection","ConversationBase","lastMessageAt","lastMessage","lastDeliveredAt","lastReadAt","unreadMessagesCount","members","properties","IMClient","_client","_debug","onConversationCreate","_setUnreadMessagesMentioned","unreadMessagesMentioned","_setLastDeliveredAt","_setLastReadAt","params","_send","convMessage","sendOptions","getSendOptions","transient","receipt","priority","pushData","will","resCommand","ackMessage","uid","t","messagesWaitingForReceipt","_update","newMessage","recall","patch","modify","_lastPatchTime","count","update","queryMessages","beforeTime","beforeMessageId","afterTime","afterMessageId","limit","direction","startTime","startMessageId","startClosed","endTime","endMessageId","endClosed","log","conditions","tt","OLD_TO_NEW","all","logsMessage","logs","msgId","patchTimestamp","ackAt","readAt","mentionPids","bin","parseMessage","messageData","createMessagesIterator","prevMessages","read","readConversationsBuffer","_doSendRead","_handleReceipt","messageId","fetchReceiptTimestamps","maxReadTimestamp","maxAckTimestamp","_fetchAllReceiptTimestamps","maxReadTuples","maxReadTuple","pid","time","_lastMessageAt","ConversationMemberRole","ConversationMemberInfo","conversation","memberId","role","conversationId","isOwner","creator","_validateSignature","signatureResult","signature","nonce","signatureFactory","createPartiallySuccess","allowedPids","failedPids","pids","clientIds","PersistentConversation","createdAt","system","muted","mutedMembers","_reset","currentAttributes","pendingAttributes","pendingKeys","re","RegExp","childKeys","test","k","parentKey","_buildCurrentAttributes","cloneDeep","_attributes","_updateServerAttributes","save","isEmpty","attr","udate","fetch","getQuery","equalTo","find","mute","unmute","_appendConversationSignature","action","conversationSignatureFactory","sort","runSignatureFactory","_appendBlacklistSignature","blacklistSignatureFactory","blacklistMessage","remove","join","failures","quit","muteMembers","add_shutup","unmuteMembers","remove_shutup","queryMutedMembers","next","query_shutup","m","newNext","blockMembers","block","unblockMembers","unblock","queryBlockedMembers","blockedPids","getAllMemberInfo","_requestWithSessionToken","results","clientId","memberInfo","MEMBER","memberInfoMap","getMemberInfo","updateMemberRole","member_info_update","memberInfos","_createdAt","Conversation","ChatRoom","ServiceConversation","subscribe","unsubscribe","transformNotFoundError","CONVERSATION_NOT_FOUND","CONVERSATION_EXPIRED","TemporaryConversation","_expiredAt","ConversationQuery","_encode","source","_quote","s","replace","_calculateFlag","prev","_where","_extraOptions","_addCondition","condition","_skip","skip","_limit","_order","containsMembers","peerIds","containsAll","withMembers","includeSelf","peerIdsSet","sizeEqualTo","lessThan","lessThanOrEqualTo","greaterThan","greaterThanOrEqualTo","notEqualTo","exists","doesNotExist","containedIn","values","notContainsIn","contains","subString","startsWith","prefix","endsWith","suffix","matches","regex","_modifiers","ignoreCase","multiline","ascending","addAscending","descending","addDescending","withLastMessagesRefreshed","enabled","_executeQuery","SessionManager","refresh","onBeforeGetSessionToken","_onBeforeGetSessionToken","setSessionToken","token","sessionToken","_sessionToken","_pendingSessionTokenPromise","setSessionTokenAsync","currentSessionToken","getSessionToken","autoRefresh","newValue","revoke","isTemporaryConversatrionId","configBitmap","props","_messageParser","_conversationCache","_ackMessageBuffer","lastPatchTime","_eventemitter","onIMClientCreate","conv","direct","session","unread","rcp","_dispatchConvMessage","_dispatchDirectMessage","_dispatchSessionMessage","_dispatchUnreadMessage","_dispatchRcpMessage","_dispatchPatchMessage","sessionMessage","op","closed","SESSION_CONFLICT","unreadMessage","convs","notifTime","lastUnreadNotifTime","getConversations","mid","ts","messageProps","countNotUpdated","conversations","rcpMessage","patches","patchMessage","patchTime","initBy","getConversation","joined","left","members_joined","members_left","members_blocked","members_unblocked","blocked","unblocked","members_shutuped","members_unshutuped","shutuped","unshutuped","member_info_changed","updated","originalMessage","directMessage","fromPeerId","_sendAck","_dispatchParsedMessage","beforeMessageDispatch","push","_doSendAck","_connection","convAckMessages","timestamps","max","_omitPeerId","peerIdOmittable","peerId","tag","deviceId","isReconnect","VERSION","_sessionManager","_identity","st","tokenTTL","stTtl","_createSessionManager","SESSION_TOKEN_EXPIRED","manager","expiredSessionToken","onlineSessionPeerIds","noCache","cachedConversation","_getTemporaryConversations","ids","remoteConversationIds","remoteTemporaryConversationIds","remoteTemporaryConversationsPromise","_handleQueryResults","getChatRoomQuery","getServiceConversationQuery","where","queryJSON","commandString","_parseConversationFromRawData","_upsertConversationToCache","fetchedConversation","decodeBase64","parseConversation","conversationData","rawData","msg_from","msg_mid","msg_timestamp","patch_timestamp","lastMessageFrom","lastMessageId","lastMessageTimestamp","lastMessagePatchTimestamp","createConversation","unique","tempConv","_tempConv","tempConvTTL","_tempConvTTL","startCommandJson","cdate","createChatRoom","createTemporaryConversation","buffer","clear","_sendReadCommand","BinaryMessage","encodeBase64","TextMessage","tryParseJson","fn","wrapper","applyPlugins","beforeMessageParse","decoratedJson","afterMessageParse","MessageParser","_messageClasses","register","messageClass","unshift","Klass","contentCopy","valid","MessagePriority","defineConversationProperty","realtime","_IMClients","_IMClientsCreationCount","messageParser","signAVUser","user","messageClasses","createIMClient","identity","clientOptions","lagecyTag","buildinOptions","_tag","_firstIMClient","isIMCommand","service","targetClient","IMPlugin"],"mappings":"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"}